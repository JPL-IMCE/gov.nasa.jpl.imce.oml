gov.nasa.jpl.imce.oml 0.9.6 adds new features to 0.9.5

## Planned scope & Issues resolved:

### [#284 Add support for OWL Object Property Cardinality Restrictions.](https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml/issues/284)

### [#286 Migrate to Photon and refactor for Tycho](https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml/issues/286)

### [#288 Add support for OWL2-DL Object Property Cardinality Restrictions](https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml/issues/288)

### [#290 CardinalityRestrictedReifiedRelationship needs derived source & target](https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml/issues/290)

### [#293 No "gov.nasa.jpl.imce.oml.parent" artifact published.](https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml/issues/293)

### [#295 Code generation problem w/ the OMLResourceZip support for Eclipse](https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml/issues/295)

### [#297 Missing serialization support for CardinalityRestrictionKind.](https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml/issues/297)

### [#299 Fix the OML grammar to allow a digit-leading character for an ID.](https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml/issues/299)

## Changes:

### OML Grammar:

Previously, the following would fail to parse:

```
open terminology <http://example.org> {
	
	concept 42c
	
}
```

The OML Xtext grammar changed slightly, reoganizing the different relative priorities of the token parsing rules to allow digit-leading identifiers in OML as long as the identifier contains at least one non-digit character. Additionally, arbitrary characters are allowed in an OML ID as long as the ID string begins and ends with a single quote character.

The grammar rule for OML IDs is as follows:

```
terminal ID: '^'? LETTER_DIGIT_PREFIX LETTER_DIGIT_SUFFIX* |
             '^'? '\'' LETTER_DIGIT_PREFIX (!'\'')* '\''
```

Examples of valid OML IDs:

```
Component
0123Component
'0123 Component'
0123-Component
'0123-?!@#$%^&*()[]=+|-Component'
```

Helper API:

```
gov.nasa.jpl.imce.oml.model.extensions.OMLExtensions

  /**
   * Returns the input string if it is already a valid OML ID or wraps it with single quotes if needed.
   * Throws IllegalArgumentException if the input string does not match the lexical syntax of an OML ID.
   */
  static def String wrapOMLIDIfNeeded(String id)
```

### Adding [OWL2-DL Object Property Cardinality Restrictions](https://www.w3.org/TR/owl2-syntax/#Object_Property_Cardinality_Restrictions)

#### Concrete Syntax (Aspects)

| Change | Synopsis | OML Aspect whose local name is... | OWL2-DL Mapping |
|--------|----------|-------------|--------------------|
| Same   | `aspect $id` | `$id` | `Declaration(Class $id)` |
|        | | | `SubClassOf($id backbone:Entity)` |
| New    | `aspect $id <= $n $p` | `$id` as an unqualified minimum cardinality $n restriction about the object property `$p` | `Declaration(Class $id>)` |
|        | | | `SubClassOf($id ObjectMinCardinality($n $p))` |
| New    | `aspect $id <= $n $p . $r` | `$id` as an qualified minimum cardinality $n restriction about the object property `$p` for the range `$r` | `Declaration(Class $id>)` |
|        | | | `SubClassOf($id ObjectMinCardinality($n $p $r))` |
| New    | `aspect $id >= $n $p` | `$id` as an unqualified maximum cardinality $n restriction about the object property `$p` | `Declaration(Class $id>)` |
|        | | | `SubClassOf($id ObjectMinCardinality($n $p))` |
| New    | `aspect $id >= $n $p . $r` | `$id` as an qualified maximum cardinality $n restriction about the object property `$p` for the range `$r` | `Declaration(Class $id>)` |
|        | | | `SubClassOf($id ObjectMinCardinality($n $p $r))` |
| New    | `aspect $id == $n $p` | `$id` as an unqualified exact cardinality restriction $n about the object property `$p` | `Declaration(Class $id>)` |
|        | | | `SubClassOf($id ObjectMinCardinality($n $p))` |
| New    | `aspect $id == $n $p . $r` | `$id` as an qualified exact cardinality restriction $n about the object property `$p` for the range `$r` | `Declaration(Class $id>)` |
|        | | | `SubClassOf($id ObjectMinCardinality($n $p $r))` |

#### Concrete Syntax (Concepts)

| Change | Synopsis | OML Concept whose local name is... | OWL2-DL Mapping |
|--------|----------|-------------|--------------------|
| Same   | `concept $id` | `$id` | `Declaration(Class $id)` |
|        | | | `SubClassOf($id backbone:Concept)` |
| New    | `concept $id <= $n $p` | `$id` as an unqualified minimum cardinality $n restriction about the object property `$p` | `Declaration(Class $id>)` |
|        | | | `SubClassOf($id ObjectMinCardinality($n $p))` |
| New    | `concept $id <= $n $p . $r` | `$id` as an qualified minimum cardinality $n restriction about the object property `$p` for the range `$r` | `Declaration(Class $id>)` |
|        | | | `SubClassOf($id ObjectMinCardinality($n $p $r))` |
| New    | `concept $id >= $n $p` | `$id` as an unqualified maximum cardinality $n restriction about the object property `$p` | `Declaration(Class $id>)` |
|        | | | `SubClassOf($id ObjectMinCardinality($n $p))` |
| New    | `concept $id >= $n $p . $r` | `$id` as an qualified maximum cardinality $n restriction about the object property `$p` for the range `$r` | `Declaration(Class $id>)` |
|        | | | `SubClassOf($id ObjectMinCardinality($n $p $r))` |
| New    | `concept $id == $n $p` | `$id` as an unqualified exact cardinality restriction $n about the object property `$p` | `Declaration(Class $id>)` |
|        | | | `SubClassOf($id ObjectMinCardinality($n $p))` |
| New    | `concept $id == $n $p . $r` | `$id` as an qualified exact cardinality restriction $n about the object property `$p` for the range `$r` | `Declaration(Class $id>)` |
|        | | | `SubClassOf($id ObjectMinCardinality($n $p $r))` |

#### Concrete Syntax (ReifiedRelationships)

| Change | Synopsis | Defines an OML ReifiedRelationship whose local name is... | OWL2-DL Mapping |
|--------|----------|-------------|--------------------|
| Same   | `reifiedRelationship $id` { ... } | `$id` | `Declaration(Class $id)` |
|        | | | `SubClassOf($id backbone:ReifiedRelationship)` |
|        | | | `...` |
| New    | `reifiedRelationship $id <= $n $p` | `$id` as an unqualified minimum cardinality $n restriction about the object property `$p` | `Declaration(Class $id>)` |
|        | | | `SubClassOf($id ObjectMinCardinality($n $p))` |
| New    | `reifiedRelationship $id <= $n $p . $r` | `$id` as an qualified minimum cardinality $n restriction about the object property `$p` for the range `$r` | `Declaration(Class $id>)` |
|        | | | `SubClassOf($id ObjectMinCardinality($n $p $r))` |
| New    | `reifiedRelationship $id >= $n $p` | `$id` as an unqualified maximum cardinality $n restriction about the object property `$p` | `Declaration(Class $id>)` |
|        | | | `SubClassOf($id ObjectMinCardinality($n $p))` |
| New    | `reifiedRelationship $id >= $n $p . $r` | `$id` as an qualified maximum cardinality $n restriction about the object property `$p` for the range `$r` | `Declaration(Class $id>)` |
|        | | | `SubClassOf($id ObjectMinCardinality($n $p $r))` |
| New    | `reifiedRelationship $id == $n $p` | `$id` as an unqualified exact cardinality restriction $n about the object property `$p` | `Declaration(Class $id>)` |
|        | | | `SubClassOf($id ObjectMinCardinality($n $p))` |
| New    | `reifiedRelationship $id == $n $p . $r` | `$id` as an qualified exact cardinality restriction $n about the object property `$p` for the range `$r` | `Declaration(Class $id>)` |
|        | | | `SubClassOf($id ObjectMinCardinality($n $p $r))` |

#### API

0.9.6 adds new metaclasses to support cardinality restrictions on an OML RestrictableRelationship whose domain is either an OML Aspect, OML Concept or OML ReifiedRelationship.

| Change | 0.9.5 | 0.9.6 |
|--------|-------|-------|
| Equivalent | `class Aspect extends Entity, UnaryTermKind {}` | `abstract class AspectKind extends Entity, UnaryTermKind {}` |
| | | `class Aspect extends AspectKind {}` |
| New | | `class CardinalityRestrictedAspect extends AspectKind {...}` |
| Equivalent | `class Concept extends Entity, UnaryTermKind {}` | `abstract class ConceptKind extends Entity, UnaryTermKind {}` |
| | | `class Concept extends ConceptKind {}` |
| New | | `class CardinalityRestrictedAspect extends ConceptKind {...}` |
| Equivalent | `class ReifiedRelationship extends ConceptualRelationship, CharacterizedEntityRelationship {...}` | `class ReifiedRelationship extends ConceptualRelationship, CharacterizedEntityRelationship {...}` |
| Equivalent |`class ReifiedRelationshipRestriction extends ConceptualRelationship {...}` | `class ReifiedRelationshipRestriction extends ConceptualRelationship {...}` |
| New | | `class CardinalityRestrictedReifiedRelationship extends ConceptualRelationship {...}` |
| Equivalent | `abstract class EntityRelationship extends Term, DirectedBinaryRelationshipKind {` | `abstract class EntityRelationship extends Term, DirectedBinaryRelationshipKind {` |
| Changed  | `  refers Entity[1] source` | `  op Entity[1] relationSource()` |
| Changed  | `  refers Entity[1] target` | `  op Entity[1] relationTarget()` |
| Same     | `  op Term[1] relationDomain()` | `  op Term[1] relationDomain()` |
| Same     | `  op Term[1] relationRange()` | `  op Term[1] relationRange()` |