/**
 * Copyright 2017 California Institute of Technology (\"Caltech\").
 * U.S. Government sponsorship acknowledged.
 * 
 * Licensed under the Apache License, Version 2.0 (the \"License\");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an \"AS IS\" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gov.nasa.jpl.imce.oml.dsl.tests;

import com.google.inject.Inject;
import com.google.inject.Provider;
import gov.nasa.jpl.imce.oml.dsl.tests.OMLInjectorProvider;
import gov.nasa.jpl.imce.oml.model.common.CommonFactory;
import gov.nasa.jpl.imce.oml.model.common.Extent;
import gov.nasa.jpl.imce.oml.model.extensions.OMLExtensions;
import gov.nasa.jpl.imce.oml.model.graphs.GraphsFactory;
import gov.nasa.jpl.imce.oml.model.graphs.TerminologyGraph;
import gov.nasa.jpl.imce.oml.model.terminologies.Aspect;
import gov.nasa.jpl.imce.oml.model.terminologies.AspectSpecializationAxiom;
import gov.nasa.jpl.imce.oml.model.terminologies.Concept;
import gov.nasa.jpl.imce.oml.model.terminologies.ConceptSpecializationAxiom;
import gov.nasa.jpl.imce.oml.model.terminologies.ForwardProperty;
import gov.nasa.jpl.imce.oml.model.terminologies.PartialReifiedRelationship;
import gov.nasa.jpl.imce.oml.model.terminologies.ReifiedRelationship;
import gov.nasa.jpl.imce.oml.model.terminologies.ReifiedRelationshipSpecializationAxiom;
import gov.nasa.jpl.imce.oml.model.terminologies.TerminologiesFactory;
import java.io.ByteArrayOutputStream;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.resource.SaveOptions;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(OMLInjectorProvider.class)
@SuppressWarnings("all")
public class OMLSpecializedReifiedRelationshipTest1 {
  @Inject
  private Provider<XtextResourceSet> resourceSetProvider;
  
  private final CommonFactory commonF = CommonFactory.eINSTANCE;
  
  private final TerminologiesFactory terminologiesF = TerminologiesFactory.eINSTANCE;
  
  private final GraphsFactory graphsF = GraphsFactory.eINSTANCE;
  
  @Test
  public void test() {
    final XtextResourceSet rs = this.resourceSetProvider.get();
    final Resource r1 = rs.createResource(URI.createFileURI("file:OMLSpecializedReifiedRelationshipTest1.oml"));
    final Extent e1 = this.commonF.createExtent();
    r1.getContents().add(e1);
    final TerminologyGraph g = this.graphsF.createTerminologyGraph();
    g.setExtent(e1);
    g.setIri("http://www.example.org/OMLSpecializedReifiedRelationshipTest1");
    final Concept A1 = this.terminologiesF.createConcept();
    A1.setTbox(g);
    A1.setName("A1");
    final Aspect B1 = this.terminologiesF.createAspect();
    B1.setTbox(g);
    B1.setName("B1");
    final ReifiedRelationship U1 = this.terminologiesF.createReifiedRelationship();
    U1.setTbox(g);
    U1.setName("U1");
    U1.setSource(A1);
    U1.setTarget(B1);
    final ForwardProperty u1 = this.terminologiesF.createForwardProperty();
    u1.setName("u1");
    u1.setReifiedRelationship(U1);
    final Concept C1 = this.terminologiesF.createConcept();
    C1.setTbox(g);
    C1.setName("C1");
    final Aspect D1 = this.terminologiesF.createAspect();
    D1.setTbox(g);
    D1.setName("D1");
    final ReifiedRelationship V1 = this.terminologiesF.createReifiedRelationship();
    V1.setTbox(g);
    V1.setName("V1");
    V1.setSource(C1);
    V1.setTarget(D1);
    final ForwardProperty v1 = this.terminologiesF.createForwardProperty();
    v1.setName("v1");
    v1.setReifiedRelationship(V1);
    final Concept A2 = this.terminologiesF.createConcept();
    A2.setTbox(g);
    A2.setName("A2");
    final ConceptSpecializationAxiom A2_extends_A1 = this.terminologiesF.createConceptSpecializationAxiom();
    A2_extends_A1.setTbox(g);
    A2_extends_A1.setSubConcept(A2);
    A2_extends_A1.setSuperConcept(A1);
    final Aspect B2 = this.terminologiesF.createAspect();
    B2.setTbox(g);
    B2.setName("B2");
    final AspectSpecializationAxiom B2_extends_B1 = this.terminologiesF.createAspectSpecializationAxiom();
    B2_extends_B1.setTbox(g);
    B2_extends_B1.setSubEntity(B2);
    B2_extends_B1.setSuperAspect(B1);
    final Concept A3 = this.terminologiesF.createConcept();
    A3.setTbox(g);
    A3.setName("A3");
    final ConceptSpecializationAxiom A3_extends_A2 = this.terminologiesF.createConceptSpecializationAxiom();
    A3_extends_A2.setTbox(g);
    A3_extends_A2.setSubConcept(A3);
    A3_extends_A2.setSuperConcept(A2);
    final Aspect B3 = this.terminologiesF.createAspect();
    B3.setTbox(g);
    B3.setName("B3");
    final AspectSpecializationAxiom B3_extends_B2 = this.terminologiesF.createAspectSpecializationAxiom();
    B3_extends_B2.setTbox(g);
    B3_extends_B2.setSubEntity(B3);
    B3_extends_B2.setSuperAspect(B2);
    final Concept C2 = this.terminologiesF.createConcept();
    C2.setTbox(g);
    C2.setName("C2");
    final ConceptSpecializationAxiom C2_extends_C1 = this.terminologiesF.createConceptSpecializationAxiom();
    C2_extends_C1.setTbox(g);
    C2_extends_C1.setSubConcept(C2);
    C2_extends_C1.setSuperConcept(C1);
    final Concept D2 = this.terminologiesF.createConcept();
    D2.setTbox(g);
    D2.setName("D2");
    final AspectSpecializationAxiom D2_extends_D1 = this.terminologiesF.createAspectSpecializationAxiom();
    D2_extends_D1.setTbox(g);
    D2_extends_D1.setSubEntity(D2);
    D2_extends_D1.setSuperAspect(D1);
    final Concept C3 = this.terminologiesF.createConcept();
    C3.setTbox(g);
    C3.setName("C3");
    final ConceptSpecializationAxiom C3_extends_C2 = this.terminologiesF.createConceptSpecializationAxiom();
    C3_extends_C2.setTbox(g);
    C3_extends_C2.setSubConcept(C3);
    C3_extends_C2.setSuperConcept(C2);
    final Concept D3 = this.terminologiesF.createConcept();
    D3.setTbox(g);
    D3.setName("D3");
    final ConceptSpecializationAxiom D3_extends_D2 = this.terminologiesF.createConceptSpecializationAxiom();
    D3_extends_D2.setTbox(g);
    D3_extends_D2.setSubConcept(D3);
    D3_extends_D2.setSuperConcept(D2);
    final Concept E = this.terminologiesF.createConcept();
    E.setTbox(g);
    E.setName("E");
    final ConceptSpecializationAxiom E_extends_A2 = this.terminologiesF.createConceptSpecializationAxiom();
    E_extends_A2.setTbox(g);
    E_extends_A2.setSubConcept(E);
    E_extends_A2.setSuperConcept(A2);
    final ConceptSpecializationAxiom E_extends_C3 = this.terminologiesF.createConceptSpecializationAxiom();
    E_extends_C3.setTbox(g);
    E_extends_C3.setSubConcept(E);
    E_extends_C3.setSuperConcept(C3);
    final Concept F = this.terminologiesF.createConcept();
    F.setTbox(g);
    F.setName("F");
    final AspectSpecializationAxiom F_extends_B2 = this.terminologiesF.createAspectSpecializationAxiom();
    F_extends_B2.setTbox(g);
    F_extends_B2.setSubEntity(F);
    F_extends_B2.setSuperAspect(B2);
    final ConceptSpecializationAxiom F_extends_D3 = this.terminologiesF.createConceptSpecializationAxiom();
    F_extends_D3.setTbox(g);
    F_extends_D3.setSubConcept(F);
    F_extends_D3.setSuperConcept(D3);
    final Concept G = this.terminologiesF.createConcept();
    G.setTbox(g);
    G.setName("G");
    final ConceptSpecializationAxiom G_extends_E = this.terminologiesF.createConceptSpecializationAxiom();
    G_extends_E.setTbox(g);
    G_extends_E.setSubConcept(G);
    G_extends_E.setSuperConcept(E);
    final Concept H = this.terminologiesF.createConcept();
    H.setTbox(g);
    H.setName("H");
    final ConceptSpecializationAxiom H_extends_F = this.terminologiesF.createConceptSpecializationAxiom();
    H_extends_F.setTbox(g);
    H_extends_F.setSubConcept(H);
    H_extends_F.setSuperConcept(F);
    final ReifiedRelationship U2 = this.terminologiesF.createReifiedRelationship();
    U2.setTbox(g);
    U2.setName("R");
    U2.setSource(A2);
    U2.setTarget(B2);
    final ForwardProperty u2 = this.terminologiesF.createForwardProperty();
    u2.setReifiedRelationship(U2);
    u2.setName("u2");
    final ReifiedRelationshipSpecializationAxiom U2_extends_U1 = this.terminologiesF.createReifiedRelationshipSpecializationAxiom();
    U2_extends_U1.setTbox(g);
    U2_extends_U1.setSubRelationship(U2);
    U2_extends_U1.setSuperRelationship(U1);
    final PartialReifiedRelationship U3 = this.terminologiesF.createPartialReifiedRelationship();
    U3.setTbox(g);
    U3.setName("U3");
    U3.setSource(A3);
    U3.setTarget(B3);
    final ReifiedRelationshipSpecializationAxiom U3_extends_U2 = this.terminologiesF.createReifiedRelationshipSpecializationAxiom();
    U3_extends_U2.setTbox(g);
    U3_extends_U2.setSubRelationship(U3);
    U3_extends_U2.setSuperRelationship(U2);
    final PartialReifiedRelationship V2 = this.terminologiesF.createPartialReifiedRelationship();
    V2.setTbox(g);
    V2.setName("V2");
    V2.setSource(C2);
    V2.setTarget(D2);
    final ReifiedRelationshipSpecializationAxiom V2_extends_V1 = this.terminologiesF.createReifiedRelationshipSpecializationAxiom();
    V2_extends_V1.setTbox(g);
    V2_extends_V1.setSubRelationship(V2);
    V2_extends_V1.setSuperRelationship(V1);
    final PartialReifiedRelationship V3 = this.terminologiesF.createPartialReifiedRelationship();
    V3.setTbox(g);
    V3.setName("V3");
    V3.setSource(C3);
    V3.setTarget(D3);
    final ReifiedRelationshipSpecializationAxiom V3_extends_V2 = this.terminologiesF.createReifiedRelationshipSpecializationAxiom();
    V3_extends_V2.setTbox(g);
    V3_extends_V2.setSubRelationship(V3);
    V3_extends_V2.setSuperRelationship(V2);
    final PartialReifiedRelationship W = this.terminologiesF.createPartialReifiedRelationship();
    W.setTbox(g);
    W.setName("W");
    W.setSource(E);
    W.setTarget(F);
    final ReifiedRelationshipSpecializationAxiom W_extends_U2 = this.terminologiesF.createReifiedRelationshipSpecializationAxiom();
    W_extends_U2.setTbox(g);
    W_extends_U2.setSubRelationship(W);
    W_extends_U2.setSuperRelationship(U2);
    final ReifiedRelationshipSpecializationAxiom W_extends_V3 = this.terminologiesF.createReifiedRelationshipSpecializationAxiom();
    W_extends_V3.setTbox(g);
    W_extends_V3.setSubRelationship(W);
    W_extends_V3.setSuperRelationship(V3);
    final ReifiedRelationship X = this.terminologiesF.createReifiedRelationship();
    X.setTbox(g);
    X.setName("X");
    X.setSource(G);
    X.setTarget(H);
    final ForwardProperty x = this.terminologiesF.createForwardProperty();
    x.setReifiedRelationship(X);
    x.setName("x");
    final ReifiedRelationshipSpecializationAxiom X_extends_W = this.terminologiesF.createReifiedRelationshipSpecializationAxiom();
    X_extends_W.setTbox(g);
    X_extends_W.setSubRelationship(X);
    X_extends_W.setSuperRelationship(W);
    OMLExtensions.normalize(e1);
    final String text1 = this.serialize(r1);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("open terminology <http://www.example.org/OMLSpecializedReifiedRelationshipTest1> {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("aspect B1");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("aspect B2");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("aspect B3");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("aspect D1");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("concept A1");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("concept A2");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("concept A3");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("concept C1");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("concept C2");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("concept C3");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("concept D2");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("concept D3");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("concept E");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("concept F");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("concept G");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("concept H");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("A2 extendsConcept A1");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("A3 extendsConcept A2");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("C2 extendsConcept C1");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("C3 extendsConcept C2");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("D3 extendsConcept D2");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("E extendsConcept A2");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("E extendsConcept C3");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("F extendsConcept D3");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("G extendsConcept E");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("H extendsConcept F");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("reifiedRelationship R {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("unreified = u2");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("source = A2");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("target = B2 }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("reifiedRelationship U1 {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("unreified = u1");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("source = A1");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("target = B1 }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("reifiedRelationship V1 {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("unreified = v1");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("source = C1");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("target = D1 }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("reifiedRelationship X {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("unreified = x");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("source = G");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("target = H }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("reifiedRelationship U3 {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("source = A3");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("target = B3 }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("reifiedRelationship V2 {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("source = C2");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("target = D2 }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("reifiedRelationship V3 {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("source = C3");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("target = D3 }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("reifiedRelationship W {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("source = E");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("target = F }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("R extendsRelationship U1");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("U3 extendsRelationship R");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("V2 extendsRelationship V1");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("V3 extendsRelationship V2");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("W extendsRelationship R");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("W extendsRelationship V3");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("X extendsRelationship W");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("B2 extendsAspect B1");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("B3 extendsAspect B2");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("D2 extendsAspect D1");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("F extendsAspect B2");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String expected1 = _builder.toString();
    Assert.assertEquals(text1, expected1);
  }
  
  public String serialize(final Resource r) {
    try {
      String _xblockexpression = null;
      {
        final ByteArrayOutputStream bos = new ByteArrayOutputStream();
        final SaveOptions.Builder builder = SaveOptions.newBuilder();
        builder.format();
        final SaveOptions s = builder.getOptions();
        r.save(bos, s.toOptionsMap());
        _xblockexpression = bos.toString();
      }
      return _xblockexpression;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
