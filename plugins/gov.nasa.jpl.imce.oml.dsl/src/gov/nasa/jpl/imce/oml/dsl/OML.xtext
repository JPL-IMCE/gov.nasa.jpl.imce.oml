/*
 * Copyright 2017 California Institute of Technology ("Caltech").
 * U.S. Government sponsorship acknowledged.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * License Terms
 */
grammar gov.nasa.jpl.imce.oml.dsl.OML 
	hidden(WS, ML_COMMENT, SL_COMMENT) 

import "http://imce.jpl.nasa.gov/oml/common"
import "http://imce.jpl.nasa.gov/oml/terminologies"
import "http://imce.jpl.nasa.gov/oml/graphs"
import "http://imce.jpl.nasa.gov/oml/bundles"
import "http://imce.jpl.nasa.gov/oml/descriptions"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Extent returns Extent:
	{Extent}
	( modules+=Module )*
	;

// syntax of Annotation & AnnotationProperties

AnnotationProperty returns AnnotationProperty:
	'annotationProperty' abbrevIRI=ABBREV_IRI '=' iri=IRI;

AnnotationPropertyValue returns AnnotationPropertyValue:
	'@' property=[AnnotationProperty|ABBREV_IRI]
	'=' value=LiteralString;
	
Module returns Module:
	TerminologyBox | DescriptionBox;
	
// 2 TerminologyBoxes

TerminologyBox returns TerminologyBox:
	Bundle | TerminologyGraph;

TerminologyGraph returns TerminologyGraph:
	( annotationProperties+=AnnotationProperty )*
	( annotations+=AnnotationPropertyValue )*
	kind=TerminologyKind 'terminology' iri=IRI 
	'{'
	( boxAxioms+=TerminologyBoxAxiom | 
	  boxStatements+=TerminologyBoxStatement
	)*
	'}';

Bundle returns Bundle:
	( annotationProperties+=AnnotationProperty )*
	( annotations+=AnnotationPropertyValue )*
	kind=TerminologyKind 'bundle' iri=IRI 
	'{'
	( boxAxioms+=TerminologyBoxAxiom |
	  boxStatements+=TerminologyBoxStatement |
	  bundleStatements+=TerminologyBundleStatement |
	  bundleAxioms+=TerminologyBundleAxiom
	)*
	'}';
	
DescriptionBox returns DescriptionBox:
	( annotationProperties+=AnnotationProperty )*
	( annotations+=AnnotationPropertyValue )*
	kind=DescriptionKind 'descriptionBox' iri=IRI
	'{'
	( closedWorldDefinitions+=DescriptionBoxExtendsClosedWorldDefinitions |
	  descriptionBoxRefinements+=DescriptionBoxRefinement |
	  conceptInstances+=ConceptInstance |
	  instanceRelationshipValueRestrictions+=InstanceRelationshipValueRestriction |
	  instanceRelationshipExistentialRangeRestrictions+=InstanceRelationshipExistentialRangeRestriction |
	  instanceRelationshipUniversalRangeRestrictions+=InstanceRelationshipUniversalRangeRestriction |
	  reifiedRelationshipInstances+=ReifiedRelationshipInstance |
	  reifiedRelationshipInstanceDomains+=ReifiedRelationshipInstanceDomain|
	  reifiedRelationshipInstanceRanges+=ReifiedRelationshipInstanceRange |
	  unreifiedRelationshipInstanceTuples+=UnreifiedRelationshipInstanceTuple |
	  singletonScalarDataPropertyValues+=SingletonInstanceScalarDataPropertyValue |
	  singletonStructuredDataPropertyValues+=SingletonInstanceStructuredDataPropertyValue
	)*
	'}';
	
TerminologyBoxAxiom returns TerminologyBoxAxiom:
	ConceptDesignationTerminologyAxiom | 
	TerminologyExtensionAxiom | 
	TerminologyNestingAxiom ;
	
	
// 1 TerminologyBundleAxiom

BundledTerminologyAxiom returns BundledTerminologyAxiom:
	( annotations+=AnnotationPropertyValue )*
	'bundles' bundledTerminology=[TerminologyBox|ExternalReference];

// 3 TerminologyBoxAxioms

ConceptDesignationTerminologyAxiom returns ConceptDesignationTerminologyAxiom:
	( annotations+=AnnotationPropertyValue )*
	'conceptDesignationTerminologyAxiom'
	'{'
		'designatedTerminology' designatedTerminology=[TerminologyBox|ExternalReference]
		'designatedConcept' designatedConcept=[Concept|Reference]
	'}';

TerminologyExtensionAxiom returns TerminologyExtensionAxiom:
	( annotations+=AnnotationPropertyValue )*
	'extends' extendedTerminology=[TerminologyBox|ExternalReference];

TerminologyNestingAxiom returns TerminologyNestingAxiom:
	( annotations+=AnnotationPropertyValue )*
	'terminologyNestingAxiom'
	'{'
		'nestingTerminology' nestingTerminology=[TerminologyBox|ExternalReference]
		'nestingContext' nestingContext=[Concept|Reference]
	'}';
	
TerminologyBoxStatement returns TerminologyBoxStatement:
	TermAxiom | 
	Term;
	
Term returns Term:
	AtomicEntity |
	EntityRelationship |
	Datatype |
	DataRelationship |
	Rule;
	
AtomicEntity returns Entity:
	Aspect | 
	CardinalityRestrictedAspect |
	Concept |
	CardinalityRestrictedConcept;
	
EntityRelationship returns EntityRelationship:
	ReifiedRelationship |
	ReifiedRelationshipRestriction |
	CardinalityRestrictedReifiedRelationship |
	UnreifiedRelationship;
	
Datatype returns Datatype:
	ScalarDataRange | 
	Structure;
	
ScalarDataRange returns DataRange:
	Scalar |
	RestrictedDataRange;
	
RestrictedDataRange returns RestrictedDataRange:
    BinaryScalarRestriction |  
    IRIScalarRestriction | 
    NumericScalarRestriction | 
    PlainLiteralScalarRestriction |
    ScalarOneOfRestriction |
    StringScalarRestriction | 
    SynonymScalarRestriction |
    TimeScalarRestriction;

DataRelationship returns DataRelationship:	
	EntityStructuredDataProperty | 
	EntityScalarDataProperty | 
	StructuredDataProperty | 
	ScalarDataProperty;
	
TermAxiom returns TermAxiom:
	EntityRestrictionAxiom |
	EntityScalarDataPropertyRestrictionAxiom |
	EntityStructuredDataPropertyRestrictionAxiom |
	ScalarOneOfLiteralAxiom |
	SpecializationAxiom |
	SubObjectPropertyOfAxiom |
	SubDataPropertyOfAxiom;
	
EntityRestrictionAxiom returns EntityRestrictionAxiom:
	EntityExistentialRestrictionAxiom | 
	EntityUniversalRestrictionAxiom;

EntityScalarDataPropertyRestrictionAxiom returns EntityScalarDataPropertyRestrictionAxiom:
	EntityScalarDataPropertyExistentialRestrictionAxiom | 
	EntityScalarDataPropertyParticularRestrictionAxiom | 
	EntityScalarDataPropertyUniversalRestrictionAxiom;
	
EntityStructuredDataPropertyRestrictionAxiom returns EntityStructuredDataPropertyRestrictionAxiom:
	EntityStructuredDataPropertyParticularRestrictionAxiom;
	
SpecializationAxiom returns SpecializationAxiom:
	ConceptSpecializationAxiom | 
	AspectSpecializationAxiom | 
	ReifiedRelationshipSpecializationAxiom; 
	
TerminologyBundleStatement returns TerminologyBundleStatement:
	RootConceptTaxonomyAxiom;

TerminologyBundleAxiom returns TerminologyBundleAxiom:
	BundledTerminologyAxiom;

ConceptTreeDisjunction returns ConceptTreeDisjunction:
	AnonymousConceptUnionAxiom |
	RootConceptTaxonomyAxiom;

DisjointUnionOfConceptsAxiom returns DisjointUnionOfConceptsAxiom:
	AnonymousConceptUnionAxiom |
	SpecificDisjointConceptAxiom;
	
enum TerminologyKind returns TerminologyKind:
	OpenWorldDefinitions = 'open' | 
	ClosedWorldDesignations = 'closed'
	;

enum CardinalityRestrictionKind returns CardinalityRestrictionKind:
	Min = '<=' |
	Max = '>=' |
	Exact = '==' 
	;
	
// 2 Atomic Entity Terms

Aspect returns Aspect:
	( annotations+=AnnotationPropertyValue )*
	'aspect' name=ID;

CardinalityRestrictedAspect returns CardinalityRestrictedAspect:
	( annotations+=AnnotationPropertyValue )*
	'aspect' name=ID 
	restrictionKind=CardinalityRestrictionKind 
	restrictedCardinality=PositiveIntegerLiteral 
	restrictedRelationship=[RestrictableRelationship|Reference] 
	( '.' restrictedRange=[Entity|Reference] )?;

Concept returns Concept:
	( annotations+=AnnotationPropertyValue )*
	'concept' name=ID;

CardinalityRestrictedConcept returns CardinalityRestrictedConcept:
	( annotations+=AnnotationPropertyValue )*
	'concept' name=ID 
	restrictionKind=CardinalityRestrictionKind 
	restrictedCardinality=PositiveIntegerLiteral 
	restrictedRelationship=[RestrictableRelationship|Reference] 
	( '.' restrictedRange=[Entity|Reference] )?;

// 2 EntityRelationship Terms

ReifiedRelationship returns ReifiedRelationship:
	( annotations+=AnnotationPropertyValue )*
	'reifiedRelationship' name=ID '{'
	( (isFunctional?='functional')? &
	  (isInverseFunctional?='inverseFunctional')? &
	  (isEssential?='essential')? &
	  (isInverseEssential?='inverseEssential')? &
	  (isSymmetric?='symmetric')? &
	  (isAsymmetric?='asymmetric')? &
	  (isReflexive?='reflexive')? &
	  (isIrreflexive?='irreflexive')? &
	  (isTransitive?='transitive')? )
	'unreified' '=' forwardProperty=ForwardProperty
	('inverse' '=' inverseProperty=InverseProperty)?
	'source' '=' source=[Entity|Reference]
	'target' '=' target=[Entity|Reference]
	'}';

ForwardProperty returns ForwardProperty:
	name=ID;

InverseProperty returns InverseProperty:
	name=ID;
	
ReifiedRelationshipRestriction returns ReifiedRelationshipRestriction:
	( annotations+=AnnotationPropertyValue )*
	'reifiedRelationshipRestriction' name=ID '{'
	'source' '=' source=[Entity|Reference]
	'target' '=' target=[Entity|Reference]
	'}';

CardinalityRestrictedReifiedRelationship returns CardinalityRestrictedReifiedRelationship:
	( annotations+=AnnotationPropertyValue )*
	'reifiedRelationship' name=ID 
	restrictionKind=CardinalityRestrictionKind 
	restrictedCardinality=PositiveIntegerLiteral 
	restrictedRelationship=[RestrictableRelationship|Reference] 
	( '.' restrictedRange=[Entity|Reference] )?;
	
UnreifiedRelationship returns UnreifiedRelationship:
	( annotations+=AnnotationPropertyValue )*
	'unreifiedRelationship' name=ID '{'
	( (isFunctional?='functional')? &
	  (isInverseFunctional?='inverseFunctional')? &
	  (isEssential?='essential')? &
	  (isInverseEssential?='inverseEssential')? &
	  (isSymmetric?='symmetric')? &
	  (isAsymmetric?='asymmetric')? &
	  (isReflexive?='reflexive')? &
	  (isIrreflexive?='irreflexive')? &
	  (isTransitive?='transitive')? )
	'source' '=' source=[Entity|Reference]
	'target' '=' target=[Entity|Reference]
	'}';

// 2 Datatypes

Scalar returns Scalar:
	( annotations+=AnnotationPropertyValue )*
	'scalar' name=ID;

Structure returns Structure:
	( annotations+=AnnotationPropertyValue )*
	'structure' name=ID;

// 4 DataRelationship Terms

EntityStructuredDataProperty returns EntityStructuredDataProperty:
	( annotations+=AnnotationPropertyValue )*
	'entityStructuredDataProperty' (isIdentityCriteria?='+')? name=ID '{'
	'domain' domain=[Entity|Reference]
	'range' range=[Structure|Reference]
	'}';

EntityScalarDataProperty returns EntityScalarDataProperty:
	( annotations+=AnnotationPropertyValue )*
	'entityScalarDataProperty' (isIdentityCriteria?='+')? name=ID '{'
	'domain' domain=[Entity|Reference]
	'range' range=[DataRange|Reference]
	'}';

StructuredDataProperty returns StructuredDataProperty:
	( annotations+=AnnotationPropertyValue )*
	'structuredDataProperty' name=ID '{'
	'domain' domain=[Structure|Reference]
	'range' range=[Structure|Reference]
	'}';

ScalarDataProperty returns ScalarDataProperty:
	( annotations+=AnnotationPropertyValue )*
	'scalarDataProperty' name=ID '{'
	'domain' domain=[Structure|Reference]
	'range' range=[DataRange|Reference]
	'}';

// 5 Rules

Rule returns Rule:
	ChainRule;
	
ChainRule returns ChainRule:
	'rule' name=ID 'infers' head=[UnreifiedRelationship|Reference] 'if' firstSegment=RuleBodySegment;

RuleBodySegment returns RuleBodySegment:
	predicate=SegmentPredicate ('&&' nextSegment=RuleBodySegment)?;

SegmentPredicate returns SegmentPredicate: 
	predicate=[Predicate|QNAME] |
	'source' '(' reifiedRelationshipSource=[ReifiedRelationship|QNAME] ')' |
	'invSource' '(' reifiedRelationshipInverseSource=[ReifiedRelationship|QNAME] ')' | 
	'target' '(' reifiedRelationshipTarget=[ReifiedRelationship|QNAME] ')' | 
	'invTarget' '(' reifiedRelationshipInverseTarget=[ReifiedRelationship|QNAME] ')' | 
	'inv' '(' unreifiedRelationshipInverse=[UnreifiedRelationship|QNAME] ')' ;

// 3 ConceptTreeDisjunctions and DisjointUnionOfConceptsAxioms

AnonymousConceptUnionAxiom returns AnonymousConceptUnionAxiom:
	( annotations+=AnnotationPropertyValue )*
	'anonymousConceptUnion' '(' name=ID ')' '{'
		( disjunctions+=DisjointUnionOfConceptsAxiom)*
	'}';

RootConceptTaxonomyAxiom returns RootConceptTaxonomyAxiom:
	( annotations+=AnnotationPropertyValue )*
	'rootConceptTaxonomy' '(' root=[Concept|Reference] ')'
	'{'
		( disjunctions+=DisjointUnionOfConceptsAxiom)*
	'}';

SpecificDisjointConceptAxiom returns SpecificDisjointConceptAxiom:
	( annotations+=AnnotationPropertyValue )*
	'disjointLeaf' '(' disjointLeaf=[Concept|QNAME] ')';

// 2 EntityRestrictionAxioms

EntityExistentialRestrictionAxiom returns EntityExistentialRestrictionAxiom:
	( annotations+=AnnotationPropertyValue )*
	'someEntities'
	restrictedDomain=[Entity|QNAME]
	'.' 
	restrictedRelationship=[RestrictableRelationship|QNAME]
	'in'
	restrictedRange=[Entity|QNAME];

EntityUniversalRestrictionAxiom returns EntityUniversalRestrictionAxiom:
	( annotations+=AnnotationPropertyValue )*
	'allEntities'
	restrictedDomain=[Entity|QNAME]
	'.' 
	restrictedRelationship=[RestrictableRelationship|QNAME]
	'in'
	restrictedRange=[Entity|QNAME];

// 3 SpecializationAxioms

AspectSpecializationAxiom returns AspectSpecializationAxiom:
	( annotations+=AnnotationPropertyValue )*
	subEntity=[Entity|Reference] 'extendsAspect' superAspect=[Aspect|Reference];

ConceptSpecializationAxiom returns ConceptSpecializationAxiom:
	( annotations+=AnnotationPropertyValue )*
	subConcept=[Concept|Reference] 'extendsConcept' superConcept=[Concept|Reference];

ReifiedRelationshipSpecializationAxiom returns ReifiedRelationshipSpecializationAxiom:
	( annotations+=AnnotationPropertyValue )*
	subRelationship=[ConceptualRelationship|Reference] 'extendsRelationship' superRelationship=[ConceptualRelationship|Reference];

// 2 Sub*PropertyOfAxioms

SubObjectPropertyOfAxiom returns SubObjectPropertyOfAxiom:
	( annotations+=AnnotationPropertyValue )*
	subProperty=[UnreifiedRelationship|Reference]
	'subObjectPropertyOf'
	superProperty=[UnreifiedRelationship|Reference];

SubDataPropertyOfAxiom returns SubDataPropertyOfAxiom:
	( annotations+=AnnotationPropertyValue )*
	subProperty=[EntityScalarDataProperty|Reference]
	'subDataPropertyOf'
	superProperty=[EntityScalarDataProperty|Reference];

// 3 EntityScalarDataPropertyRestrictionAxioms

EntityScalarDataPropertyExistentialRestrictionAxiom returns EntityScalarDataPropertyExistentialRestrictionAxiom:
	( annotations+=AnnotationPropertyValue )*
	'someData'
	restrictedEntity=[Entity|Reference]
	'.'
	scalarProperty=[EntityScalarDataProperty|Reference]
	'in' scalarRestriction=[DataRange|Reference];

EntityScalarDataPropertyParticularRestrictionAxiom returns EntityScalarDataPropertyParticularRestrictionAxiom:
	( annotations+=AnnotationPropertyValue )*
	'every'
	restrictedEntity=[Entity|Reference]
	'.' scalarProperty=[EntityScalarDataProperty|Reference]
	'=' literalValue=LiteralValue ('^^' valueType=[DataRange|Reference])?;
	
EntityScalarDataPropertyUniversalRestrictionAxiom returns EntityScalarDataPropertyUniversalRestrictionAxiom:
	( annotations+=AnnotationPropertyValue )*
	'allData'
	restrictedEntity=[Entity|Reference]
	'.' scalarProperty=[EntityScalarDataProperty|Reference]
	'in' scalarRestriction=[DataRange|Reference];

// 1 EntityStructuredDataPropertyRestrictionAxiom
EntityStructuredDataPropertyParticularRestrictionAxiom returns EntityStructuredDataPropertyParticularRestrictionAxiom:
	( annotations+=AnnotationPropertyValue )*
	'every'
	restrictedEntity=[Entity|Reference]
	'.'
	structuredDataProperty=[EntityStructuredDataProperty|Reference]
	'='
	'{'
	( structuredDataPropertyRestrictions+=RestrictionStructuredDataPropertyTuple |
	  scalarDataPropertyRestrictions+=RestrictionScalarDataPropertyValue )*
	'}';
	
RestrictionStructuredDataPropertyTuple returns RestrictionStructuredDataPropertyTuple:
	( annotations+=AnnotationPropertyValue )*
	structuredDataProperty=[StructuredDataProperty|Reference]
	'=' '{'
	( structuredDataPropertyRestrictions+=RestrictionStructuredDataPropertyTuple |
	  scalarDataPropertyRestrictions+=RestrictionScalarDataPropertyValue )*
    '}';

RestrictionScalarDataPropertyValue returns RestrictionScalarDataPropertyValue:
	( annotations+=AnnotationPropertyValue )*
	scalarDataProperty=[ScalarDataProperty|Reference]
	'=' 
	scalarPropertyValue=LiteralValue ('^^' valueType=[DataRange|Reference])?;

// 8 RestrictedDataRanges + 1 ScalarOneOfLiteralAxiom

BinaryScalarRestriction returns BinaryScalarRestriction:
	( annotations+=AnnotationPropertyValue )*
	'binaryScalarRestriction' name=ID
	'{'
		( ('length' length=PositiveIntegerLiteral)? &
		  ('minLength' minLength=PositiveIntegerLiteral)? &
		  ('maxLength' maxLength=PositiveIntegerLiteral)? )
		'restrictedRange' restrictedRange=[DataRange|Reference]
	'}';

IRIScalarRestriction returns IRIScalarRestriction:
	( annotations+=AnnotationPropertyValue )*
	'iriScalarRestriction' name=ID
	'{'
		( ('length' length=PositiveIntegerLiteral)? &
		  ('minLength' minLength=PositiveIntegerLiteral)? &
		  ('maxLength' maxLength=PositiveIntegerLiteral)? &
		  ('pattern' pattern=PATTERN)? )
		'restrictedRange' restrictedRange=[DataRange|Reference]
	'}';

NumericScalarRestriction returns NumericScalarRestriction:
	( annotations+=AnnotationPropertyValue )*
	'numericScalarRestriction' name=ID
	'{'
		( ('minInclusive' minInclusive=LiteralNumber)? &
		  ('maxInclusive' maxInclusive=LiteralNumber)? &
		  ('minExclusive' minExclusive=LiteralNumber)? &
		  ('maxExclusive' maxExclusive=LiteralNumber)? )
		'restrictedRange' restrictedRange=[DataRange|Reference]
	'}';

PlainLiteralScalarRestriction returns PlainLiteralScalarRestriction:
	( annotations+=AnnotationPropertyValue )*
	'plainLiteralScalarRestriction' name=ID
	'{'
		( ('length' length=PositiveIntegerLiteral)? &
		  ('minLength' minLength=PositiveIntegerLiteral)? &
		  ('maxLength' maxLength=PositiveIntegerLiteral)? &
		  ('pattern' pattern=PATTERN)? &
		  ('langRange' langRange=LANG_TAG)? )
		'restrictedRange' restrictedRange=[DataRange|Reference]
	'}';

ScalarOneOfRestriction returns ScalarOneOfRestriction:
	( annotations+=AnnotationPropertyValue )*
	'scalarOneOfRestriction' name=ID
	'{'
		'restrictedRange' restrictedRange=[DataRange|Reference]
	'}';

ScalarOneOfLiteralAxiom returns ScalarOneOfLiteralAxiom:
	( annotations+=AnnotationPropertyValue )*
	'oneOf'
	axiom=[ScalarOneOfRestriction|Reference]
	'=' value=LiteralValue ('^^' valueType=[DataRange|Reference])?;

StringScalarRestriction returns StringScalarRestriction:
	( annotations+=AnnotationPropertyValue )*
	'stringScalarRestriction' name=ID
	'{'
		( ('length' length=PositiveIntegerLiteral)? &
		  ('minLength' minLength=PositiveIntegerLiteral)? &
		  ('maxLength' maxLength=PositiveIntegerLiteral)? &
		  ('pattern' pattern=PATTERN)? )
		'restrictedRange' restrictedRange=[DataRange|Reference]
	'}';

SynonymScalarRestriction returns SynonymScalarRestriction:
	( annotations+=AnnotationPropertyValue )*
	'synonymScalarRestriction' name=ID
	'{'
		'restrictedRange' restrictedRange=[DataRange|Reference]
	'}';

TimeScalarRestriction returns TimeScalarRestriction:
	( annotations+=AnnotationPropertyValue )*
	'timeScalarRestriction' name=ID
	'{'
		( ('minInclusive' minInclusive=LiteralDateTime)? &
		  ('maxInclusive' maxInclusive=LiteralDateTime)? &
		  ('minExclusive' minExclusive=LiteralDateTime)? &
		  ('maxExclusive' maxExclusive=LiteralDateTime)? )
		'restrictedRange' restrictedRange=[DataRange|Reference]
	'}';

//----------------------------

enum DescriptionKind returns DescriptionKind:
	Final = 'final' | 
	Partial = 'partial';

TerminologyInstanceAssertion returns TerminologyInstanceAssertion:
	ConceptualEntitySingletonInstance |
	ReifiedRelationshipInstanceDomain | 
	ReifiedRelationshipInstanceRange | 
	UnreifiedRelationshipInstanceTuple;

ConceptualEntitySingletonInstance returns ConceptualEntitySingletonInstance:
	ConceptInstance |
	ReifiedRelationshipInstance;
	
DescriptionBoxExtendsClosedWorldDefinitions returns DescriptionBoxExtendsClosedWorldDefinitions:
	( annotations+=AnnotationPropertyValue )*
	'extends' closedWorldDefinitions=[TerminologyBox|ExternalReference];

DescriptionBoxRefinement returns DescriptionBoxRefinement:
	( annotations+=AnnotationPropertyValue )*
	'refines' refinedDescriptionBox=[DescriptionBox|ExternalReference];

SingletonInstanceScalarDataPropertyValue returns SingletonInstanceScalarDataPropertyValue:
	( annotations+=AnnotationPropertyValue )*
	singletonInstance=[ConceptualEntitySingletonInstance|Reference] 
	'.' 
	scalarDataProperty=[EntityScalarDataProperty|Reference] 
	'=' 
	scalarPropertyValue=LiteralValue ('^^' valueType=[DataRange|Reference])?;

SingletonInstanceStructuredDataPropertyValue returns SingletonInstanceStructuredDataPropertyValue:
	( annotations+=AnnotationPropertyValue )*
	singletonInstance=[ConceptualEntitySingletonInstance|Reference] 
	'.' 
	structuredDataProperty=[DataRelationshipToStructure|Reference] 
	'=' '{'
	( structuredPropertyTuples+=StructuredDataPropertyTuple |
	  scalarDataPropertyValues += ScalarDataPropertyValue )*
	'}';

StructuredDataPropertyTuple returns StructuredDataPropertyTuple:
	( annotations+=AnnotationPropertyValue )*
	structuredDataProperty=[DataRelationshipToStructure|Reference] 
	'=' '{'
	( structuredPropertyTuples+=StructuredDataPropertyTuple |
	  scalarDataPropertyValues += ScalarDataPropertyValue )*
	'}';

ScalarDataPropertyValue returns ScalarDataPropertyValue:
	( annotations+=AnnotationPropertyValue )*
	scalarDataProperty=[DataRelationshipToScalar|Reference]
	'='
	scalarPropertyValue=LiteralValue ('^^' valueType=[DataRange|Reference])?;

ConceptInstance returns ConceptInstance:
	( annotations+=AnnotationPropertyValue )*
	'conceptInstance' '(' name=ID 'is-a' singletonConceptClassifier=[Concept|Reference] ')';

ReifiedRelationshipInstance returns ReifiedRelationshipInstance:
	( annotations+=AnnotationPropertyValue )*
	'reifiedRelationshipInstance' '(' name=ID 'is-a' singletonConceptualRelationshipClassifier=[ConceptualRelationship|Reference] ')';

InstanceRelationshipValueRestriction returns InstanceRelationshipValueRestriction:
	( annotations+=AnnotationPropertyValue )*
	domain=[ConceptualEntitySingletonInstance|Reference] 
	'.' restrictedRelationship=[RestrictableRelationship|Reference] 
	'=' range=[ConceptualEntitySingletonInstance|Reference];
	
InstanceRelationshipExistentialRangeRestriction returns InstanceRelationshipExistentialRangeRestriction:
	( annotations+=AnnotationPropertyValue )*
	'someEntities'
	domain=[ConceptualEntitySingletonInstance|Reference] 
	'.' restrictedRelationship=[RestrictableRelationship|Reference] 
	'in' range=[Entity|Reference];
	
InstanceRelationshipUniversalRangeRestriction returns InstanceRelationshipUniversalRangeRestriction:
	( annotations+=AnnotationPropertyValue )*
	'allEntities'
	domain=[ConceptualEntitySingletonInstance|Reference] 
	'.' restrictedRelationship=[RestrictableRelationship|Reference] 
	'in' range=[Entity|Reference];
	
ReifiedRelationshipInstanceDomain returns ReifiedRelationshipInstanceDomain:
	( annotations+=AnnotationPropertyValue )*
	'domain' 
	'(' reifiedRelationshipInstance=[ReifiedRelationshipInstance|Reference] ')'
	'=' domain=[ConceptualEntitySingletonInstance|Reference];

ReifiedRelationshipInstanceRange returns ReifiedRelationshipInstanceRange:
	( annotations+=AnnotationPropertyValue )*
	'range'
	'(' reifiedRelationshipInstance=[ReifiedRelationshipInstance|Reference] ')'
	'=' range=[ConceptualEntitySingletonInstance|Reference];

UnreifiedRelationshipInstanceTuple returns UnreifiedRelationshipInstanceTuple:
	( annotations+=AnnotationPropertyValue )*
	'tuple'
	'{'
		'unreifiedRelationship' unreifiedRelationship=[UnreifiedRelationship|Reference]
		'domain' domain=[ConceptualEntitySingletonInstance|Reference]
		'range' range=[ConceptualEntitySingletonInstance|Reference]
	'}';

//----------------------------

Reference:											IRI | QNAME;

ExternalReference:									IRI;
	
QNAME:												ABBREV_IRI | ValidID;

ValidID:												ID;
	
//----------------------------

LiteralValue returns LiteralValue:					LiteralBoolean | LiteralDateTime | LiteralString | LiteralUUID | LiteralURI | LiteralNumber;

LiteralBoolean returns LiteralBoolean:				{LiteralBoolean} bool=(TRUE|FALSE);

LiteralDateTime returns LiteralDateTime: 			{LiteralDateTime} dateTime=DATE_TIME;

LiteralString returns LiteralString:					LiteralQuotedString | LiteralRawString;

LiteralQuotedString returns LiteralQuotedString:		{LiteralQuotedString} string=QUOTED_STRING_VALUE;

LiteralRawString returns LiteralRawString:			{LiteralRawString} string=RAW_STRING_VALUE;

UUIDDataType returns UUIDDataType:					UUID;

LiteralUUID returns LiteralUUID:						{LiteralUUID} uuid=UUIDDataType;

URIDataType returns URIDataType:						URI;

LiteralURI returns LiteralURI:						{LiteralURI} uri=URIDataType;

LiteralNumber returns LiteralNumber:					LiteralReal | LiteralRational | LiteralFloat | LiteralDecimal;

LiteralReal returns LiteralReal:						{LiteralReal} real=REAL;

LiteralRational returns LiteralRational:				{LiteralRational} rational=RationalDataType;

RationalDataType returns RationalDataType:				RATIONAL;

terminal RATIONAL returns RationalDataType:				'-'? DIGIT+ '/' DIGIT+;

LiteralFloat returns LiteralFloat:						{LiteralFloat} float=FLOAT;

LiteralDecimal returns LiteralDecimal:					{LiteralDecimal} decimal=DIGITS | decimal=DECIMAL;

PositiveIntegerLiteral returns PositiveIntegerLiteral: 	DIGITS;

//----------------------------

terminal FALSE returns ecore::EBoolean:					'false';
terminal TRUE returns ecore::EBoolean:					'true';

//----------------------------
// https://www.w3.org/TR/xmlschema11-2/#rf-lexicalMappings-datetime

terminal fragment DIGIT: 								'0'..'9';

terminal fragment DIGIT19:								'1'..'9';

terminal fragment DIGIT02:								'0'..'2';

terminal fragment DIGIT03:								'0'..'3';

terminal fragment DIGIT05:								'0'..'5';

terminal fragment YEAR_FRAG:							'-'? ( (DIGIT19 DIGIT DIGIT DIGIT+) | ('0' DIGIT DIGIT DIGIT) );

terminal fragment MONTH_FRAG:							('0' DIGIT19) | ('1' DIGIT02);

terminal fragment DAY_FRAG:								('0' DIGIT19) | (('1'|'2') DIGIT) | ('3' ('0'|'1'));

terminal fragment HOUR_FRAG:							(('0'|'1')DIGIT) | ('2'DIGIT03);

terminal fragment MINUTE_FRAG:							DIGIT05 DIGIT;

terminal fragment SECOND_FRAG:							DIGIT05 DIGIT ('.' DIGIT+)?;

terminal fragment END_OF_DAY_FRAG:						'24:00:00' ('.' DIGIT+)?;

terminal fragment TIMEZONE_FRAG:						'Z' | ('+'|'-') (('0' DIGIT | '1' DIGIT03) ':' MINUTE_FRAG | '14:00');

//----------------------------
// http://www.ietf.org/rfc/rfc3987.txt

terminal fragment ALPHA:								('a'..'z'|'A'..'Z');

terminal fragment SCHEME:								ALPHA ( ALPHA | DIGIT | '+' | '-' | '.' )*;

terminal fragment PCT_ENCODED:							'%' HEX_DIGIT HEX_DIGIT;

terminal fragment UNRESERVED:							ALPHA | DIGIT | '-' | '.' | '_' | '~';

terminal fragment DIGIT04:								'0'..'4';

terminal fragment DEC_OCTET:							( DIGIT | '1' DIGIT | '2' DIGIT04 DIGIT | '25' DIGIT05);

terminal fragment IPV4_ADDRESS:							DEC_OCTET '.' DEC_OCTET '.' DEC_OCTET '.' DEC_OCTET;

terminal fragment IUSER_PART:							( UNRESERVED | PCT_ENCODED )+;

terminal fragment IUSER_INFO:							IUSER_PART (':' IUSER_PART)*;

terminal fragment IUNRESERVED_PART:						ALPHA | DIGIT | '-' | '_' | '~';

terminal fragment IUNRESERVED:							ALPHA IUNRESERVED_PART? ( '.' IUNRESERVED_PART )*;

terminal fragment IHOST:								IPV4_ADDRESS | IUNRESERVED;

terminal fragment PORT:									DIGIT+;

terminal fragment IAUTHORITY:							( IUSER_INFO '@' )? IHOST ( ':' PORT )?;

terminal fragment IPCHAR:								IUNRESERVED_PART | PCT_ENCODED;

terminal fragment ISEGMENT:								IPCHAR+;

terminal fragment IPATH:								ISEGMENT ('/' ISEGMENT)*;

terminal fragment IHIER_PART:							'//' IAUTHORITY IPATH?;

terminal fragment IFRAGMENT:							ISEGMENT;

terminal URI returns URIDataType:						SCHEME ':' IHIER_PART ( '#' IFRAGMENT )?;

//----------------------------

terminal CONSTANT_NAME:									ALPHA ( ALPHA | DIGIT )*;

terminal REAL returns RealDataType:						'{' ('-' | '+')? CONSTANT_NAME '}';

terminal PATTERN returns LiteralPattern:				'/' ((! '/') | '\\/')* '/';

terminal QUOTED_STRING_VALUE returns QuotedStringDataType: 	'"' ( '\\' . ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\')| !('\\'|'"') )* '"';

terminal RAW_STRING_VALUE returns RawStringDataType:			'"""' -> '"""';

terminal IRI:											'<' (!'>')* '>';

terminal fragment LETTER:								'a'..'z'|'A'..'Z';

terminal fragment LETTER_DIGIT:							LETTER | DIGIT;

terminal fragment LETTER_DIGIT_PREFIX:					LETTER_DIGIT | '_';

terminal fragment LETTER_DIGIT_SUFFIX:					LETTER_DIGIT | '_' | '-' | '.';

terminal ABBREV_IRI:									LETTER_DIGIT_PREFIX LETTER_DIGIT_SUFFIX* ':' LETTER_DIGIT_PREFIX LETTER_DIGIT_SUFFIX*;
	
//----------------------------
// https://www.w3.org/TR/xmlschema11-2/#language

terminal LANG_TAG returns LanguageTagDataType:			'lang=' LETTER+('-'LETTER_DIGIT+)*;
    
terminal DATE_TIME returns DateTimeDataType: 			'dateTime=' YEAR_FRAG '-' MONTH_FRAG '-' DAY_FRAG 'T' ( (HOUR_FRAG ':' MINUTE_FRAG ':' SECOND_FRAG) | END_OF_DAY_FRAG ) TIMEZONE_FRAG?;

terminal UUID returns UUIDDataType:						'uuid=' HEX_8DIGITS '-' HEX_4DIGITS '-' HEX_4DIGITS '-' HEX_4DIGITS '-' HEX_12DIGITS;

terminal fragment HEX_12DIGITS:							HEX_8DIGITS HEX_4DIGITS;

terminal fragment HEX_8DIGITS:							HEX_4DIGITS HEX_4DIGITS;

terminal fragment HEX_4DIGITS:							HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;

terminal fragment HEX_LETTER:							'a'..'f' | 'A'..'F';

terminal fragment HEX_DIGIT:							DIGIT | HEX_LETTER;

terminal fragment HEX:									('0x'|'0X') (HEX_DIGIT|'_')+ ('#' (('b'|'B')('i'|'I') | ('l'|'L')))?;
	
terminal DIGITS returns PositiveIntegerLiteral:			DIGIT+;

terminal fragment DEC:
	'-'?
	DIGIT+
	(('e'|'E') ('+'|'-')? DIGIT+)? 
	(('b'|'B')('i'|'I'|'d'|'D') | ('l'|'L'|'d'|'D'|'f'|'F'))?;

terminal DECIMAL returns DecimalDataType: 				DEC | HEX;

terminal FLOAT returns FloatDataType:
	'-'?
	(DIGIT+ '.' DIGIT+)
    (('e' | 'E') ('+' | '-')? DIGIT+)?;

terminal ID:											'^'? LETTER_DIGIT_PREFIX LETTER_DIGIT_SUFFIX* |
														'^'? '\'' LETTER_DIGIT_PREFIX (!'\'')* '\'';
	    
terminal ML_COMMENT: 									'/*' -> '*/';
 
terminal SL_COMMENT:									'//' !('\n'|'\r')* ('\r'? '\n')?;
 
terminal WS: 											(' '|'\t'|'\r'|'\n')+;