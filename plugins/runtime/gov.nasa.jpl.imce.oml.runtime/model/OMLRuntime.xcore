/**
 * Copyright 2017 California Institute of Technology (\"Caltech\").
 * U.S. Government sponsorship acknowledged.
 * 
 * Licensed under the Apache License, Version 2.0 (the \"License\")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * 		http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an \"AS IS\" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */
@Ecore(
	nsPrefix="omlr", 
	nsURI="http://imce.jpl.nasa.gov/oml/runtime"
)
@GenModel(
	copyrightText="\nCopyright 2017 California Institute of Technology (\"Caltech\").\nU.S. Government sponsorship acknowledged.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
	modelPluginVariables="org.eclipse.xtext.xbase.lib org.eclipse.emf.ecore.xcore.lib org.eclipse.emf.cdo",
	rootExtendsClass="org.eclipse.emf.internal.cdo.CDOObjectImpl",
	rootExtendsInterface="org.eclipse.emf.cdo.CDOObject",
	childCreationExtenders="true",
	extensibleProviderFactory="true",
	complianceLevel="8.0",
	featureDelegation="None",
	modelName="OMLRuntime",
	prefix="OMLRuntime",
	modelDirectory="/gov.nasa.jpl.imce.oml.runtime/src-gen/",
	editDirectory="/gov.nasa.jpl.imce.oml.runtime.edit/src-gen/"
)
package gov.nasa.jpl.imce.oml.runtime

import org.eclipse.emf.ecore.util.ECrossReferenceAdapter
import org.eclipse.emf.ecore.util.EcoreUtil

annotation "http://imce.jpl.nasa.gov/oml/runtime/OMLProvenance" as OMLProvenance

type IRI wraps String

type LocalName wraps String

type LexicalValue wraps String

/**
* TODO: Improve performance, usage of EcoreUtil.UsageCrossReferencer may not be as efficient as 
*       another implementation utilizing code that is used by "aql:self.eInverse(base::Contains)"
* 		according to Maged
*/		
abstract class OMLObject {
		
	op <T extends OMLObject> T[] omlInverseReferencers(Class<T> aType) {
		val resourceSet = this.eResource.resourceSet
		val adapters = resourceSet.eAdapters.filter(ECrossReferenceAdapter)
		if (adapters.empty) {
			val references = EcoreUtil.UsageCrossReferencer.find(this, resourceSet)
			references.map[EObject].filter(aType).asEList
		} else {
			adapters.get(0).getInverseReferences(this).filter(aType).asEList
		}
	}
}

/*
 * @see gov.nasa.jpl.imce.oml.model.descriptions.DescriptionBox
 */
class OMLDescription extends OMLObject {
	IRI omlIRI
	
	contains OMLEntity[] omlContents opposite omlDescription
}

/*
 * @see gov.nasa.jpl.imce.oml.model.descriptions.StructuredDataPropertyTuple
 */
class OMLStructure extends OMLObject {}

/*
 * @see gov.nasa.jpl.imce.oml.model.descriptions.ConceptualEntitySingletonInstance
 * 
 * Note that there is no name attribute per se.
 * When mapping OMLRuntime-based M1 => OML DescriptionBox M1, the OMLEntity ID will be used as a name.
 */
abstract class OMLEntity extends OMLObject {
	LocalName omlName

	container OMLDescription[1] omlDescription opposite omlContents
}

class OMLAspect extends OMLEntity {}

/*
 * @see gov.nasa.jpl.imce.oml.model.descriptions.ConceptInstance
 */
class OMLConcept extends OMLEntity {}

/*
 * @see gov.nasa.jpl.imce.oml.model.descriptions.ReifiedRelationshipInstance
 * @see gov.nasa.jpl.imce.oml.model.descriptions.ReifiedRelationshipInstanceDomain
 * @see gov.nasa.jpl.imce.oml.model.descriptions.ReifiedRelationshipInstanceRange
 */
class OMLReifiedRelationship extends OMLEntity {
	refers OMLEntity[1] omlSource
	refers OMLEntity[1] omlTarget
}
