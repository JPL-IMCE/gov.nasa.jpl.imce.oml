/*
 * Copyright 2017 California Institute of Technology ("Caltech").
 * U.S. Government sponsorship acknowledged.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * License Terms
 */
grammar gov.nasa.jpl.imce.oml.dsl.OML 
	hidden(WS, ML_COMMENT, SL_COMMENT) 

import "http://imce.jpl.nasa.gov/oml/common"
import "http://imce.jpl.nasa.gov/oml/terminologies"
import "http://imce.jpl.nasa.gov/oml/graphs"
import "http://imce.jpl.nasa.gov/oml/bundles"
import "http://imce.jpl.nasa.gov/oml/descriptions"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Extent returns Extent:
	{Extent}
	( annotationProperties+=AnnotationProperty |
	  modules+=Module
	)*
	;

// syntax of Annotation & AnnotationProperties

AnnotationProperty returns AnnotationProperty:
	'annotationProperty' abbrevIRI=ABBREV_IRI '=' iri=IRI;

/*
 * Note that the concrete syntax for the Annotation.subject is defined implicitly
 * in the sense that the subject of an Annotation is always the preceding
 * TerminologyThing or the subject of the preceding Annotation.
 * 
 * For example, the following shows the concrete syntax for 2 Concepts, Foo and Bar
 * and of 3 Annotations; the first two Annotations have Foo as their subject because 
 * Foo is the first preceding TerminologyThing; the third Annotation has Bar as its subject
 * because it appears after the TerminologyThing Bar.
 * 
 * concept Foo
 * @rdfs:label = "foo"
 * @dc:description = "A Foo is ..."
 * 
 * concept Bar
 * @rdfs:label = "bar
 * 
 * @see jpl.imce.oml.specification.linking.OMLLinkingService
 */
AnnotationPropertyValue returns AnnotationPropertyValue:
	'@' property=[AnnotationProperty|ABBREV_IRI]
	'=' value=STRING;
	
Module returns Module:
	TerminologyBox | DescriptionBox;
	
// 2 TerminologyBoxes

TerminologyBox returns TerminologyBox:
	Bundle | TerminologyGraph;

TerminologyGraph returns TerminologyGraph:
	( annotations+=AnnotationPropertyValue )*
	kind=TerminologyKind 'terminology' iri=IRI 
	'{'
	( boxAxioms+=TerminologyBoxAxiom | 
	  boxStatements+=TerminologyBoxStatement
	)*
	'}';

Bundle returns Bundle:
	( annotations+=AnnotationPropertyValue )*
	kind=TerminologyKind 'bundle' iri=IRI 
	'{'
	( boxAxioms+=TerminologyBoxAxiom |
	  boxStatements+=TerminologyBoxStatement |
	  bundleStatements+=TerminologyBundleStatement |
	  bundleAxioms+=TerminologyBundleAxiom
	)*
	'}';
	
DescriptionBox returns DescriptionBox:
	( annotations+=AnnotationPropertyValue )*
	kind=DescriptionKind 'descriptionBox' iri=IRI
	'{'
	( closedWorldDefinitions+=DescriptionBoxExtendsClosedWorldDefinitions |
	  descriptionBoxRefinements+=DescriptionBoxRefinement |
	  conceptInstances+=ConceptInstance |
	  reifiedRelationshipInstances+=ReifiedRelationshipInstance |
	  reifiedRelationshipInstanceDomains+=ReifiedRelationshipInstanceDomain|
	  reifiedRelationshipInstanceRanges+=ReifiedRelationshipInstanceRange |
	  unreifiedRelationshipInstanceTuples+=UnreifiedRelationshipInstanceTuple |
	  singletonScalarDataPropertyValues+=SingletonInstanceScalarDataPropertyValue |
	  singletonStructuredDataPropertyValues+=SingletonInstanceStructuredDataPropertyValue
	)*
	'}';
	
TerminologyBoxAxiom returns TerminologyBoxAxiom:
	ConceptDesignationTerminologyAxiom | 
	TerminologyExtensionAxiom | 
	TerminologyNestingAxiom ;
	
	
// 1 TerminologyBundleAxiom

BundledTerminologyAxiom returns BundledTerminologyAxiom:
	( annotations+=AnnotationPropertyValue )*
	'bundles' bundledTerminology=[TerminologyBox|ExternalReference];

// 3 TerminologyBoxAxioms

ConceptDesignationTerminologyAxiom returns ConceptDesignationTerminologyAxiom:
	( annotations+=AnnotationPropertyValue )*
	'conceptDesignationTerminologyAxiom'
	'{'
		'designatedTerminology' designatedTerminology=[TerminologyBox|ExternalReference]
		'designatedConcept' designatedConcept=[Concept|Reference]
	'}';

TerminologyExtensionAxiom returns TerminologyExtensionAxiom:
	( annotations+=AnnotationPropertyValue )*
	'extends' extendedTerminology=[TerminologyBox|ExternalReference];

TerminologyNestingAxiom returns TerminologyNestingAxiom:
	( annotations+=AnnotationPropertyValue )*
	'terminologyNestingAxiom'
	'{'
		'nestingTerminology' nestingTerminology=[TerminologyBox|ExternalReference]
		'nestingContext' nestingContext=[Concept|Reference]
	'}';
	
TerminologyBoxStatement returns TerminologyBoxStatement:
	TermAxiom | 
	Term;
	
Term returns Term:
	AtomicEntity |
	EntityRelationship |
	Datatype |
	DataRelationship;
	
AtomicEntity returns Entity:
	Aspect | 
	Concept;
	
EntityRelationship returns EntityRelationship:
	ReifiedRelationship | 
	UnreifiedRelationship;
	
Datatype returns Datatype:
	ScalarDataRange | 
	Structure;
	
ScalarDataRange returns DataRange:
	Scalar |
	RestrictedDataRange;
	
RestrictedDataRange returns RestrictedDataRange:
    BinaryScalarRestriction |  
    IRIScalarRestriction | 
    NumericScalarRestriction | 
    PlainLiteralScalarRestriction |
    ScalarOneOfRestriction |
    StringScalarRestriction | 
    SynonymScalarRestriction |
    TimeScalarRestriction;

DataRelationship returns DataRelationship:	
	EntityStructuredDataProperty | 
	EntityScalarDataProperty | 
	StructuredDataProperty | 
	ScalarDataProperty;
	
TermAxiom returns TermAxiom:
	EntityRestrictionAxiom |
	EntityScalarDataPropertyRestrictionAxiom |
	EntityStructuredDataPropertyRestrictionAxiom |
	ScalarOneOfLiteralAxiom |
	SpecializationAxiom;
	
EntityRestrictionAxiom returns EntityRestrictionAxiom:
	EntityExistentialRestrictionAxiom | 
	EntityUniversalRestrictionAxiom;

EntityScalarDataPropertyRestrictionAxiom returns EntityScalarDataPropertyRestrictionAxiom:
	EntityScalarDataPropertyExistentialRestrictionAxiom | 
	EntityScalarDataPropertyParticularRestrictionAxiom | 
	EntityScalarDataPropertyUniversalRestrictionAxiom;
	
EntityStructuredDataPropertyRestrictionAxiom returns EntityStructuredDataPropertyRestrictionAxiom:
	EntityStructuredDataPropertyParticularRestrictionAxiom;
	
SpecializationAxiom returns SpecializationAxiom:
	ConceptSpecializationAxiom | 
	AspectSpecializationAxiom | 
	ReifiedRelationshipSpecializationAxiom; 
	
TerminologyBundleStatement returns TerminologyBundleStatement:
	RootConceptTaxonomyAxiom;

TerminologyBundleAxiom returns TerminologyBundleAxiom:
	BundledTerminologyAxiom;

ConceptTreeDisjunction returns ConceptTreeDisjunction:
	AnonymousConceptUnionAxiom |
	RootConceptTaxonomyAxiom;

DisjointUnionOfConceptsAxiom returns DisjointUnionOfConceptsAxiom:
	AnonymousConceptUnionAxiom |
	SpecificDisjointConceptAxiom;
	
enum TerminologyKind returns TerminologyKind:
	OpenWorldDefinitions = 'open' | 
	ClosedWorldDesignations = 'closed'
	;

// 2 Atomic Entity Terms

Aspect returns Aspect:
	( annotations+=AnnotationPropertyValue )*
	'aspect' name=ID;

Concept returns Concept:
	( annotations+=AnnotationPropertyValue )*
	'concept' name=ID;

// 2 EntityRelationship Terms

ReifiedRelationship returns ReifiedRelationship:
	( annotations+=AnnotationPropertyValue )*
	'reifiedRelationship' name=ID '{'
	( (isFunctional?='functional')? &
	  (isInverseFunctional?='inverseFunctional')? &
	  (isEssential?='essential')? &
	  (isInverseEssential?='inverseEssential')? &
	  (isSymmetric?='symmetric')? &
	  (isAsymmetric?='asymmetric')? &
	  (isReflexive?='reflexive')? &
	  (isIrreflexive?='irreflexive')? &
	  (isTransitive?='transitive')? )
	'unreified' '=' unreifiedPropertyName=ID
	('inverse' '=' unreifiedInversePropertyName=ID)?
	'source' '=' source=[Entity|Reference]
	'target' '=' target=[Entity|Reference]
	'}';

UnreifiedRelationship returns UnreifiedRelationship:
	( annotations+=AnnotationPropertyValue )*
	'unreifiedRelationship' name=ID '{'
	( (isFunctional?='functional')? &
	  (isInverseFunctional?='inverseFunctional')? &
	  (isEssential?='essential')? &
	  (isInverseEssential?='inverseEssential')? &
	  (isSymmetric?='symmetric')? &
	  (isAsymmetric?='asymmetric')? &
	  (isReflexive?='reflexive')? &
	  (isIrreflexive?='irreflexive')? &
	  (isTransitive?='transitive')? )
	'source' '=' source=[Entity|Reference]
	'target' '=' target=[Entity|Reference]
	'}';

// 2 Datatypes

Scalar returns Scalar:
	( annotations+=AnnotationPropertyValue )*
	'scalar' name=ID;

Structure returns Structure:
	( annotations+=AnnotationPropertyValue )*
	'structure' name=ID;

// 4 DataRelationship Terms

EntityStructuredDataProperty returns EntityStructuredDataProperty:
	( annotations+=AnnotationPropertyValue )*
	'entityStructuredDataProperty' (isIdentityCriteria?='+')? name=ID '{'
	'domain' domain=[Entity|Reference]
	'range' range=[Structure|Reference]
	'}';

EntityScalarDataProperty returns EntityScalarDataProperty:
	( annotations+=AnnotationPropertyValue )*
	'entityScalarDataProperty' (isIdentityCriteria?='+')? name=ID '{'
	'domain' domain=[Entity|Reference]
	'range' range=[DataRange|Reference]
	'}';

StructuredDataProperty returns StructuredDataProperty:
	( annotations+=AnnotationPropertyValue )*
	'structuredDataProperty' name=ID '{'
	'domain' domain=[Structure|Reference]
	'range' range=[Structure|Reference]
	'}';

ScalarDataProperty returns ScalarDataProperty:
	( annotations+=AnnotationPropertyValue )*
	'scalarDataProperty' name=ID '{'
	'domain' domain=[Structure|Reference]
	'range' range=[DataRange|Reference]
	'}';

// ConceptTreeDisjunctions and DisjointUnionOfConceptsAxioms


AnonymousConceptUnionAxiom returns AnonymousConceptUnionAxiom:
	( annotations+=AnnotationPropertyValue )*
	'anonymousConceptUnion' '(' name=ID ')' '{'
		( disjunctions+=DisjointUnionOfConceptsAxiom)*
	'}';

RootConceptTaxonomyAxiom returns RootConceptTaxonomyAxiom:
	( annotations+=AnnotationPropertyValue )*
	'rootConceptTaxonomy' '(' root=[Concept|Reference] ')'
	'{'
		( disjunctions+=DisjointUnionOfConceptsAxiom)*
	'}';

SpecificDisjointConceptAxiom returns SpecificDisjointConceptAxiom:
	( annotations+=AnnotationPropertyValue )*
	'disjointLeaf' '(' disjointLeaf=[Concept|Reference] ')';

// 2 EntityRestrictionAxioms

EntityExistentialRestrictionAxiom returns EntityExistentialRestrictionAxiom:
	( annotations+=AnnotationPropertyValue )*
	'someEntities'
	restrictedDomain=[Entity|Reference]
	'.' 
	restrictedRelation=[ReifiedRelationship|Reference]
	'in' restrictedRange=[Entity|Reference];

EntityUniversalRestrictionAxiom returns EntityUniversalRestrictionAxiom:
	( annotations+=AnnotationPropertyValue )*
	'allEntities'
	restrictedDomain=[Entity|Reference]
	'.' 
	restrictedRelation=[ReifiedRelationship|Reference]
	'in' restrictedRange=[Entity|Reference];

// 3 SpecializationAxioms

AspectSpecializationAxiom returns AspectSpecializationAxiom:
	( annotations+=AnnotationPropertyValue )*
	subEntity=[Entity|Reference] 'extendsAspect' superAspect=[Aspect|Reference];

ConceptSpecializationAxiom returns ConceptSpecializationAxiom:
	( annotations+=AnnotationPropertyValue )*
	subConcept=[Concept|Reference] 'extendsConcept' superConcept=[Concept|Reference];

ReifiedRelationshipSpecializationAxiom returns ReifiedRelationshipSpecializationAxiom:
	( annotations+=AnnotationPropertyValue )*
	subRelationship=[ReifiedRelationship|Reference] 'extendsRelationship' superRelationship=[ReifiedRelationship|Reference];

// 3 EntityScalarDataPropertyRestrictionAxioms

EntityScalarDataPropertyExistentialRestrictionAxiom returns EntityScalarDataPropertyExistentialRestrictionAxiom:
	( annotations+=AnnotationPropertyValue )*
	'someData'
	restrictedEntity=[Entity|Reference]
	'.'
	scalarProperty=[EntityScalarDataProperty|Reference]
	'in' scalarRestriction=[DataRange|Reference];

EntityScalarDataPropertyParticularRestrictionAxiom returns EntityScalarDataPropertyParticularRestrictionAxiom:
	( annotations+=AnnotationPropertyValue )*
	'every'
	restrictedEntity=[Entity|Reference]
	'.' scalarProperty=[EntityScalarDataProperty|Reference]
	'=' literalValue=Value;
	
EntityScalarDataPropertyUniversalRestrictionAxiom returns EntityScalarDataPropertyUniversalRestrictionAxiom:
	( annotations+=AnnotationPropertyValue )*
	'allData'
	restrictedEntity=[Entity|Reference]
	'.' scalarProperty=[EntityScalarDataProperty|Reference]
	'in' scalarRestriction=[DataRange|Reference];

// 1 EntityStructuredDataPropertyRestrictionAxiom
EntityStructuredDataPropertyParticularRestrictionAxiom returns EntityStructuredDataPropertyParticularRestrictionAxiom:
	( annotations+=AnnotationPropertyValue )*
	'every'
	restrictedEntity=[Entity|Reference]
	'.'
	structuredDataProperty=[EntityStructuredDataProperty|Reference]
	'='
	'{'
	( structuredDataPropertyRestrictions+=RestrictionStructuredDataPropertyTuple |
	  scalarDataPropertyRestrictions+=RestrictionScalarDataPropertyValue )*
	'}';
	
RestrictionStructuredDataPropertyTuple returns RestrictionStructuredDataPropertyTuple:
	( annotations+=AnnotationPropertyValue )*
	structuredDataProperty=[StructuredDataProperty|Reference]
	'=' '{'
	( structuredDataPropertyRestrictions+=RestrictionStructuredDataPropertyTuple |
	  scalarDataPropertyRestrictions+=RestrictionScalarDataPropertyValue )*
    '}';

RestrictionScalarDataPropertyValue returns RestrictionScalarDataPropertyValue:
	( annotations+=AnnotationPropertyValue )*
	scalarDataProperty=[ScalarDataProperty|Reference]
	'=' 
	scalarPropertyValue=Value;

// 8 RestrictedDataRanges + 1 ScalarOneOfLiteralAxiom

BinaryScalarRestriction returns BinaryScalarRestriction:
	( annotations+=AnnotationPropertyValue )*
	'binaryScalarRestriction' name=ID
	'{'
		( ('length' length=INT)? &
		  ('minLength' minLength=INT)? &
		  ('maxLength' maxLength=INT)? )
		'restrictedRange' restrictedRange=[DataRange|Reference]
	'}';

IRIScalarRestriction returns IRIScalarRestriction:
	( annotations+=AnnotationPropertyValue )*
	'iriScalarRestriction' name=ID
	'{'
		( ('length' length=INT)? &
		  ('minLength' minLength=INT)? &
		  ('maxLength' maxLength=INT)? &
		  ('pattern' pattern=STRING)? )
		'restrictedRange' restrictedRange=[DataRange|Reference]
	'}';

NumericScalarRestriction returns NumericScalarRestriction:
	( annotations+=AnnotationPropertyValue )*
	'numericScalarRestriction' name=ID
	'{'
		( ('minInclusive' minInclusive=STRING)? &
		  ('maxInclusive' maxInclusive=STRING)? &
		  ('minExclusive' minExclusive=STRING)? &
		  ('maxExclusive' maxExclusive=STRING)? )
		'restrictedRange' restrictedRange=[DataRange|Reference]
	'}';

PlainLiteralScalarRestriction returns PlainLiteralScalarRestriction:
	( annotations+=AnnotationPropertyValue )*
	'plainLiteralScalarRestriction' name=ID
	'{'
		( ('length' length=INT)? &
		  ('minLength' minLength=INT)? &
		  ('maxLength' maxLength=INT)? &
		  ('pattern' pattern=STRING)? &
		  ('langRange' langRange=STRING)? )
		'restrictedRange' restrictedRange=[DataRange|Reference]
	'}';

ScalarOneOfRestriction returns ScalarOneOfRestriction:
	( annotations+=AnnotationPropertyValue )*
	'scalarOneOfRestriction' name=ID
	'{'
		'restrictedRange' restrictedRange=[DataRange|Reference]
	'}';

ScalarOneOfLiteralAxiom returns ScalarOneOfLiteralAxiom:
	( annotations+=AnnotationPropertyValue )*
	'oneOf'
	axiom=[ScalarOneOfRestriction|Reference]
	'=' value=STRING;

StringScalarRestriction returns StringScalarRestriction:
	( annotations+=AnnotationPropertyValue )*
	'stringScalarRestriction' name=ID
	'{'
		( ('length' length=INT)? &
		  ('minLength' minLength=INT)? &
		  ('maxLength' maxLength=INT)? &
		  ('pattern' pattern=STRING)? )
		'restrictedRange' restrictedRange=[DataRange|Reference]
	'}';

SynonymScalarRestriction returns SynonymScalarRestriction:
	( annotations+=AnnotationPropertyValue )*
	'synonymScalarRestriction' name=ID
	'{'
		'restrictedRange' restrictedRange=[DataRange|Reference]
	'}';

TimeScalarRestriction returns TimeScalarRestriction:
	( annotations+=AnnotationPropertyValue )*
	'timeScalarRestriction' name=ID
	'{'
		( ('minInclusive' minInclusive=STRING)? &
		  ('maxInclusive' maxInclusive=STRING)? &
		  ('minExclusive' minExclusive=STRING)? &
		  ('maxExclusive' maxExclusive=STRING)? )
		'restrictedRange' restrictedRange=[DataRange|Reference]
	'}';
//----------------------------

enum DescriptionKind returns DescriptionKind:
	Final = 'final' | 
	Partial = 'partial';

TerminologyInstanceAssertion returns TerminologyInstanceAssertion:
	ConceptualEntitySingletonInstance |
	ReifiedRelationshipInstanceDomain | 
	ReifiedRelationshipInstanceRange | 
	UnreifiedRelationshipInstanceTuple;

ConceptualEntitySingletonInstance returns ConceptualEntitySingletonInstance:
	ConceptInstance |
	ReifiedRelationshipInstance;
	
DescriptionBoxExtendsClosedWorldDefinitions returns DescriptionBoxExtendsClosedWorldDefinitions:
	( annotations+=AnnotationPropertyValue )*
	'extends' closedWorldDefinitions=[TerminologyBox|ExternalReference];

DescriptionBoxRefinement returns DescriptionBoxRefinement:
	( annotations+=AnnotationPropertyValue )*
	'refines' refinedDescriptionBox=[DescriptionBox|ExternalReference];

SingletonInstanceScalarDataPropertyValue returns SingletonInstanceScalarDataPropertyValue:
	( annotations+=AnnotationPropertyValue )*
	singletonInstance=[ConceptualEntitySingletonInstance|Reference] 
	'.' 
	scalarDataProperty=[EntityScalarDataProperty|Reference] 
	'=' 
	scalarPropertyValue=Value;

SingletonInstanceStructuredDataPropertyValue returns SingletonInstanceStructuredDataPropertyValue:
	( annotations+=AnnotationPropertyValue )*
	singletonInstance=[ConceptualEntitySingletonInstance|Reference] 
	'.' 
	structuredDataProperty=[DataRelationshipToStructure|Reference] 
	'=' '{'
	( structuredPropertyTuples+=StructuredDataPropertyTuple |
	  scalarDataPropertyValues += ScalarDataPropertyValue )*
	'}';

StructuredDataPropertyTuple returns StructuredDataPropertyTuple:
	( annotations+=AnnotationPropertyValue )*
	structuredDataProperty=[DataRelationshipToStructure|Reference] 
	'=' '{'
	( structuredPropertyTuples+=StructuredDataPropertyTuple |
	  scalarDataPropertyValues += ScalarDataPropertyValue )*
	'}';

ScalarDataPropertyValue returns ScalarDataPropertyValue:
	( annotations+=AnnotationPropertyValue )*
	scalarDataProperty=[DataRelationshipToScalar|Reference]
	'='
	scalarPropertyValue=Value;

ConceptInstance returns ConceptInstance:
	( annotations+=AnnotationPropertyValue )*
	'conceptInstance' '(' name=ID 'is-a' singletonConceptClassifier=[Concept|Reference] ')';

ReifiedRelationshipInstance returns ReifiedRelationshipInstance:
	( annotations+=AnnotationPropertyValue )*
	'reifiedRelationshipInstance' '(' name=ID 'is-a' singletonReifiedRelationshipClassifier=[ReifiedRelationship|Reference] ')';

ReifiedRelationshipInstanceDomain returns ReifiedRelationshipInstanceDomain:
	( annotations+=AnnotationPropertyValue )*
	'domain' 
	'(' reifiedRelationshipInstance=[ReifiedRelationshipInstance|Reference] ')'
	'=' domain=[ConceptualEntitySingletonInstance|Reference];

ReifiedRelationshipInstanceRange returns ReifiedRelationshipInstanceRange:
	( annotations+=AnnotationPropertyValue )*
	'range'
	'(' reifiedRelationshipInstance=[ReifiedRelationshipInstance|Reference] ')'
	'=' range=[ConceptualEntitySingletonInstance|Reference];

UnreifiedRelationshipInstanceTuple returns UnreifiedRelationshipInstanceTuple:
	( annotations+=AnnotationPropertyValue )*
	'tuple'
	'{'
		'unreifiedRelationship' unreifiedRelationship=[UnreifiedRelationship|Reference]
		'domain' domain=[ConceptualEntitySingletonInstance|Reference]
		'range' range=[ConceptualEntitySingletonInstance|Reference]
	'}';

//----------------------------

Reference:
	IRI | QNAME;

ExternalReference:
	IRI;
	
QNAME:
	ABBREV_IRI | ValidID;

ValidID:
	ID;
	
Value:
	DECIMAL | INT | STRING | UUID | HEX | FLOAT;
	
//----------------------------

@Override
terminal STRING: 
	'"' ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|'"') )* '"'? |
	"'" ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|"'") )* "'"?;


terminal IRI:
	'<' (!'>')* '>';

terminal ABBREV_IRI:
	('a'..'z'|'A'..'Z'|'_'|'0'..'9')('a'..'z'|'A'..'Z'|'_'|'-'|'.'|'0'..'9')* ':' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')('a'..'z'|'A'..'Z'|'_'|'-'|'.'|'0'..'9')*;
	
terminal ID:
	'^'? ('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'-'|'.'|'0'..'9')*;

terminal UUID:
	HEX_8DIGITS '-' HEX_4DIGITS '-' HEX_4DIGITS '-' HEX_4DIGITS '-' HEX_12DIGITS;

terminal HEX_12DIGITS:
 	HEX_8DIGITS HEX_4DIGITS;

terminal HEX_8DIGITS:
 	HEX_4DIGITS HEX_4DIGITS;

terminal HEX_4DIGITS:
 	HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;

terminal HEX_DIGIT:
	('0'..'9'|'a'..'f'|'A'..'F');

terminal HEX:
	('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+ 
	('#' (('b'|'B')('i'|'I') | ('l'|'L')))?;
	
terminal INT returns ecore::EInt:
	('0'..'9')+; 

terminal DECIMAL:
	INT 
	(('e'|'E') ('+'|'-')? INT)? 
	(('b'|'B')('i'|'I'|'d'|'D') | ('l'|'L'|'d'|'D'|'f'|'F'))?;

terminal FLOAT:
	'-'?
	(('0'..'9')+ '.' ('0'..'9')+)
    (('e' | 'E') ('+' | '-')? ('0'..'9')+)?;
    
terminal ML_COMMENT  : 
 	'/*' -> '*/';
 
terminal SL_COMMENT : 
 	'//' !('\n'|'\r')* ('\r'? '\n')?;
 
terminal WS  : 
 	(' '|'\t'|'\r'|'\n')+;