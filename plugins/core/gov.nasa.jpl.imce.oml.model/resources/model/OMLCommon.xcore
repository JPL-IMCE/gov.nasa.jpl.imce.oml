@Ecore(nsPrefix="omlc", nsURI="http://imce.jpl.nasa.gov/oml/common")
@GenModel(copyrightText="
Copyright 2016 California Institute of Technology (\"Caltech\").
U.S. Government sponsorship acknowledged.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
", bundleManifest="false",
   childCreationExtenders="true",
   complianceLevel="8.0",
   featureDelegation="None",
   modelPluginVariables="org.eclipse.xtext.xbase.lib org.eclipse.emf.ecore.xcore.lib org.eclipse.emf.cdo",
   rootExtendsClass="org.eclipse.emf.internal.cdo.CDOObjectImpl",
   rootExtendsInterface="org.eclipse.emf.cdo.CDOObject",
   modelDirectory="gov.nasa.jpl.imce.oml.model/src-gen/",
   modelName="OMLC")
  
// If commented, it is possible to build cleanly with 'gradle :generateXtext'
// If uncommented, 'gradle :generateXtext' will have several java.io.IOExceptions like these:
// The path '.../plugin.properties' is unmapped
// The path '.../build.properties' is unmapped
// The path '.../plugin.xml' is unmapped
// @GenModel(modelPluginID="gov.nasa.jpl.imce.oml.model")
 
package gov.nasa.jpl.imce.oml.model.common

import gov.nasa.jpl.imce.oml.model.extensions.OMLExtensions

// This forward reference had to be commented out because it is unclear
// how to properly load this model and resolve 
// the proxy reference to TerminologyExtent in the OMLExtents.xcore resource.
// import gov.nasa.jpl.imce.oml.extents.TerminologyExtent

/* 
 * If present, the value of the 'kind' key specifies a Scala immutable collection.
 * Recognized values are 'Map' (the key type is specified in the 'key' value) and 'Set'
 */
annotation "http://imce.jpl.nasa.gov/oml/Collection" as Collection

/*
 * If present, indicates that the metaclass is for the resolver API only.
 */
annotation "http://imce.jpl.nasa.gov/oml/ResolverAPI" as ResolverAPI

/* 
 * If present, indicates that this feature overrides another feature in a parent.
 * Normally, this information should be accessible from the EMF API; however,
 * it is not obvious how to get it.
 */
annotation "http://imce.jpl.nasa.gov/oml/Override" as Override

/* 
 * If present, indicates that this feature overrides another feature in a parent.
 * Normally, this information should be accessible from the EMF API; however,
 * it is not obvious how to get it.
 */
annotation "http://imce.jpl.nasa.gov/oml/OverrideVal" as OverrideVal

/*
 * If present, disables including the feature in the resolver API & resolver Implementation
 * This is used for:
 * - classes that are intended for the EMF API but not the functional resolver API
 * - operations that will generate an EMF API operation but have no sensible equivalent in the functional resolver API
 * - structural features with a corresponding read-only immutable query operation
 *   (the structural feature is not part of the functional API; the immutable query operation is)
 * - inverse container features
 */
annotation "http://imce.jpl.nasa.gov/oml/NotFunctionalAPI" as NotFunctionalAPI

annotation "http://imce.jpl.nasa.gov/oml/FunctionalInterface" as FunctionalInterface

/*
 * If present, disables including the feature in the normalized schema tables API
 */
annotation "http://imce.jpl.nasa.gov/oml/NotSchema" as NotSchema

/*
 * If present, indicates that a Class represents a value in some other table
 */
annotation "http://imce.jpl.nasa.gov/oml/ValueTable" as ValueTable

/*
 * Use @Scala(code="...") when the XCore operation body
 * is an Xbase XMemberFeatureCall because the XCore API
 * assumes that the generated code is for Java so it internally
 * converts feature calls into Java query operation calls.
 */
annotation "http://imce.jpl.nasa.gov/oml/Scala" as Scala

/*
 * Use on structural features to specify whether it participates in ordering criteria for instances of the class.
 */
annotation "http://imce.jpl.nasa.gov/oml/IsOrderingKey" as IsOrderingKey

/*
 * Use on a structural feature to specify that the OMLResolvedFactory needs to include a "copy" constructor
 * to clone an instance of the feature's class replacing the value of the annotated feature. 
 */
annotation "http://imce.jpl.nasa.gov/oml/CopyConstructor" as CopyConstructor

/*
 * If present, indicates that a glossary entry must be generated for the documentation.
 */
annotation "http://imce.jpl.nasa.gov/oml/Glossary" as Glossary

annotation "http://imce.jpl.nasa.gov/oml/ExtentContainer" as ExtentContainer

annotation "http://imce.jpl.nasa.gov/oml/ExtentManaged" as ExtentManaged

annotation "http://imce.jpl.nasa.gov/oml/ImplicitExtent" as ImplicitExtent

annotation "http://imce.jpl.nasa.gov/oml/NamespaceUUID" as NamespaceUUID

annotation "http://imce.jpl.nasa.gov/oml/DerivedUUID" as DerivedUUID

/*
 * An IRI based on RFC 3987
 */
type IRI wraps String
/*
 * A local name of an IRI
 */
type LocalName wraps String
/*
 * A lexical value for a real, a decimal or an integer number
 */
type LexicalValue wraps String
/*
 * A lexical value for a real, a decimal or an integer number
 */
type LexicalNumber wraps String
/*
 * A lexical value for a time instant with and without time zone offsets
 */
type LexicalTime wraps String
/*
 * A regular expression for a string based on rule of xsd:pattern
 */
type Pattern wraps String
/*
 * An RFC-4122 UUID (either Version 4 (random) or Version 5 (SHA-1 hash & namespace) 
 */
type UUID wraps String
/*
 * A language range based on RFC 5646
 */
type LangRange wraps String

type AbbrevIRI wraps String

type NamespacePrefix wraps String

/*
 * An OML Element is a logical abstraction
 * for everything involved in OML that
 * is globally identified by a version 5 namespace UUID.
 */
abstract class Element {
	
	@ImplicitExtent
	@IsOrderingKey
	derived readonly UUID[1] uuid get { uuid() }
	
	@NotFunctionalAPI
	@NotSchema
	op UUID[1] uuid()
}

/*
 * An OML Resource is an abstraction for 
 * everything in a vocabulary that is identifiable
 * locally by name within the vocabulary and 
 * globally by an IRI across multiple vocabularies.
 * For a particular OML Resource, the constraints 
 * between its name and its IRI depend on what kind of OML Resource it is.
 */
@Glossary
abstract class Resource {
	
	@ImplicitExtent
	@NotSchema
	op IRI[?] iri()
	
	@NotSchema
	op LocalName[1] name()
	
	@ImplicitExtent
	@NotSchema
	op String[?] abbrevIRI()
}

/*
 * An OML ModuleElement is an OML Element defined in an OML Module
 */
@Glossary
abstract class ModuleElement extends Element {}

/*
 * An OML ModuleEdge is a binary, directed relationship from one OML Module to another
 */
@Glossary
abstract class ModuleEdge extends Element {
	
	@NotSchema
	@ImplicitExtent
	op Module[?] sourceModule()
	
	@NotSchema
	@ImplicitExtent
	op Module[1] targetModule()
}

/*
 * An OML AnnotationProperty maps to an [OWL2 AnnotationProperty] 
 * and is similarly a non-logical property for associating some information
 * to any OML TerminologyThing in an OML Module.
 */
@Glossary
@ExtentManaged
@NamespaceUUID(namespace="iri", factors="")
class AnnotationProperty {

	@NotFunctionalAPI
	@NotSchema
	container Extent[1] extent opposite annotationProperties
	
	@Scala(code="com.fasterxml.uuid.Generators.nameBasedGenerator(com.fasterxml.uuid.impl.NameBasedGenerator.NAMESPACE_URL).generate(iri)")
	@IsOrderingKey
	derived UUID[1] uuid get {
		OMLExtensions.namespaceUUID(iri)?.toString
	}

	IRI[1] iri
	
	id AbbrevIRI[1] abbrevIRI
}

/* 
 * For the OML tabular interchange representation,
 * an OML AnnotationPropertyTable pairs an OML AnnotationProperty key
 * with a set of OML AnnotationEntry values.
 */
@Glossary
@NotFunctionalAPI
@NotSchema
class AnnotationPropertyTable wraps java.util.Map$Entry {
	
	@IsOrderingKey
	refers AnnotationProperty[1] key
	
	@Collection(kind="Set")
	contains AnnotationEntry[] value
}

/*
 * For the OML tabular interchange representation,
 * an OML AnnotationEntry (for a given OML AnnotationProperty) is a triple:
 * - an OML Module in which the OML AnnotationEntry appears 
 * - an annotated OML TerminologyThing subject
 * - a String value as the representation of some information
 *   about the subject in that module.
 */
@Glossary
@ValueTable
class AnnotationEntry {
	
	@IsOrderingKey
	refers Module[1] module
	
	@IsOrderingKey 
	refers Element[1] subject
	
	@IsOrderingKey
	String[1] value
}

/* 
 * An OML AnnotationSubjectTable is an in-memory construct
 * pairing an OML TerminologyThing subject key with a set
 * of OML AnnotationSubjectPropertyValue tuples.
 */
@Glossary
@NotFunctionalAPI
@NotSchema
class AnnotationSubjectTable wraps java.util.Map$Entry {
	refers Element[1] key
	
	contains AnnotationSubjectPropertyValue[] value
}

/*
 * An OML AnnotationSubjectPropertyValue is an in-memory construct
 * pairing an OML AnnotationProperty with a String value.
 */
@Glossary
@NotFunctionalAPI
@NotSchema
class AnnotationSubjectPropertyValue {
	refers AnnotationProperty[1] property
	String[1] value
}

/*
 * An OML Annotation maps to an [OWL2 Annotation] and is similarly
 * a non-logical statement in an OML Module
 * associating some information as the value of an
 * OML AnnotationProperty for describing a subject (an OML TerminologyThing).
 */
@Glossary
@NotSchema
class Annotation {
	
	container Module[1] module opposite annotations
	
	@IsOrderingKey
	refers AnnotationProperty[1] property
	
	@IsOrderingKey
	refers Element[1] subject
	
	@IsOrderingKey
	String[1] value
}

/*
 * An OML Extent is an in-memory store of all OML Element(s)
 * loaded from external OML documents.
 */
@ExtentContainer
@Glossary
@ResolverAPI
class Extent {
	
	@NotFunctionalAPI
	@NotSchema
	contains Module[] modules opposite extent
	
	@NotFunctionalAPI
	@NotSchema
	contains AnnotationProperty[] annotationProperties opposite extent
	
}

/*
 * An OML Module maps to an [OWL2-DL Ontology];
 * it is a kind of OML Resource that is a logical container of OML ModuleElement(s)
 * and a non-logical container of OML Annotation(s).
 */
@Glossary
@ExtentManaged
@NamespaceUUID(namespace="iri", factors="")
abstract class Module extends Element, Resource {
	
	@NotFunctionalAPI
	@NotSchema
	container Extent[1] extent opposite modules
	
	@ImplicitExtent
	@NotSchema
	op ModuleEdge[] moduleEdges()
	
	id IRI[1] iri
	
	@Scala(code="scala.Some(iri)")
	@ImplicitExtent
	@NotSchema
	@Override
	op IRI[?] iri() { getIri }
	
	@Scala(code="iri.substring(1+iri.lastIndexOf('/'))")
	@NotSchema
 	op NamespacePrefix[1] nsPrefix() { getIri()?.substring(1+getIri().lastIndexOf('/')) }
	
	@NotSchema
	op LocalName[1] name() { nsPrefix }
	
	@Scala(code="scala.Some(nsPrefix)")
	@ImplicitExtent
	@NotSchema
	op String[?] abbrevIRI() { nsPrefix }
	
	@NotSchema
	@Collection(kind="Set")
	contains Annotation[] annotations opposite module
	
	@NotFunctionalAPI
	@NotSchema
	op UUID[1] uuid() {
		OMLExtensions.namespaceUUID(iri()?:"")?.toString
	}
}
